// MC Recovery Fund - Main Application Logic
// Part 1: Core functionality and routing
// ==========================================

// Global State
const AppState = {
  currentRoute: "home",
  currentQuiz: null,
  currentQuestion: 0,
  quizAnswers: [],
  userData: {
    streak: 0,
    lastActiveDate: null,
    completedQuizzes: [],
    unlockedBadges: [],
    progress: { quizzes: 0, eduTopics: 0, glossaryViewed: 0 },
    settings: { theme: "auto", language: "ru" },
  },
};

// Telegram WebApp Integration
let tg = null;
try {
  tg = window.Telegram?.WebApp;
  if (tg) {
    tg.ready();
    tg.expand();
    tg.enableClosingConfirmation();
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if (tg.colorScheme) {
      document.documentElement.setAttribute(
        "data-theme",
        tg.colorScheme === "dark" ? "dark" : "light"
      );
    }
    if (tg.themeParams) applyTelegramTheme(tg.themeParams);

    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–º–µ–Ω—É —Ç–µ–º—ã –≤ –∫–ª–∏–µ–Ω—Ç–µ Telegram
    tg.onEvent("themeChanged", () => {
      const scheme = tg.colorScheme === "dark" ? "dark" : "light";
      const r = document.documentElement;
      r.setAttribute("data-theme", scheme);
      // —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
      // —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
      r.style.removeProperty("--color-text");
      r.style.removeProperty("--color-bg");
      if (tg.themeParams) applyTelegramTheme(tg.themeParams);
    });
    tg.MainButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    tg.MainButton.hide();
  }
} catch (e) {
  console.log("Running outside Telegram WebApp");
}

function applyTelegramTheme(params) {
  const root = document.documentElement;
  // –ù–ï –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Ç–µ–º—ã (--color-bg/--color-text)!
  // –ê–∫—Ü–µ–Ω—Ç/–∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Telegram:
  if (params.button_color) {
    root.style.setProperty("--color-primary", params.button_color);
  }
  // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —ç–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º ¬´—Å—ã—Ä–∞—è¬ª –ø–∞–ª–∏—Ç—Ä–∞ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
  if (params.bg_color) root.style.setProperty("--tg-bg", params.bg_color);
  if (params.text_color) root.style.setProperty("--tg-text", params.text_color);
}

function hapticFeedback(type = "light") {
  try {
    if (tg?.HapticFeedback) {
      if (type === "success" || type === "error") {
        tg.HapticFeedback.notificationOccurred(type);
      } else {
        tg.HapticFeedback.impactOccurred(type);
      }
    }
  } catch (e) {}
}

function saveUserData() {
  try {
    localStorage.setItem(
      "mc_recovery_user_data",
      JSON.stringify(AppState.userData)
    );
  } catch (e) {
    console.error("Failed to save:", e);
  }
}

function loadUserData() {
  try {
    const saved = localStorage.getItem("mc_recovery_user_data");
    if (saved) {
      AppState.userData = { ...AppState.userData, ...JSON.parse(saved) };
      updateStreak();
    }
  } catch (e) {
    console.error("Failed to load:", e);
  }
}

function updateStreak() {
  const today = new Date().toDateString();
  const lastActive = AppState.userData.lastActiveDate;
  if (lastActive !== today) {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    if (lastActive === yesterday.toDateString()) {
      AppState.userData.streak += 1;
    } else if (lastActive) {
      AppState.userData.streak = 1;
    }
    AppState.userData.lastActiveDate = today;
    saveUserData();
  }
}

function navigate(route, params = {}) {
  hapticFeedback("light");
  AppState.currentRoute = route;
  window.location.hash = route;
  if (tg?.MainButton) tg.MainButton.hide();
  const backBtn = document.getElementById("backBtn");
  backBtn.style.display = route === "home" ? "none" : "flex";
  renderRoute(route, params);
}

function renderRoute(route, params) {
  const content = document.getElementById("content");
  switch (route) {
    case "home":
      renderHome(content);
      break;
    case "quizzes":
      renderQuizzes(content);
      break;
    case "quiz":
      renderQuiz(content, params.id);
      break;
    case "quiz-question":
      renderQuizQuestion(content);
      break;
    case "quiz-result":
      renderQuizResult(content);
      break;
    case "edu":
      renderEdu(content);
      break;
    case "progress":
      renderProgress(content);
      break;
    case "achievements":
      renderAchievements(content);
      break;
    case "glossary":
      renderGlossary(content);
      break;
    case "simulator":
      renderSimulator(content);
      break;
    case "help":
      renderHelp(content);
      break;
    case "profile":
      renderProfile(content);
      break;
    default:
      renderHome(content);
  }
}

function getDaysWord(num) {
  if (num % 10 === 1 && num % 100 !== 11) return "–¥–µ–Ω—å";
  if ([2, 3, 4].includes(num % 10) && ![12, 13, 14].includes(num % 100))
    return "–¥–Ω—è";
  return "–¥–Ω–µ–π";
}

function getDifficultyLabel(level) {
  const labels = { easy: "–õ–µ–≥–∫–∏–π", medium: "–°—Ä–µ–¥–Ω–∏–π", hard: "–°–ª–æ–∂–Ω—ã–π" };
  return labels[level] || level;
}

function getDifficultyColor(level) {
  const colors = {
    easy: "var(--color-success)",
    medium: "var(--color-primary)",
    hard: "var(--color-error)",
  };
  return colors[level] || "var(--color-text)";
}

function renderHome(container) {
  const streak = AppState.userData.streak;
  const completedQuizzes = AppState.userData.completedQuizzes.length;
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">MC Recovery Fund</h1>
      <p class="hero-subtitle">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</p>
      <p class="hero-description">
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MC Recovery Fund. 
        –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–∏–∑—ã, –∏–∑—É—á–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è.
      </p>
    </div>
    ${
      streak > 0
        ? `<div style="text-align: center; margin: var(--space-lg) 0;">
      <div class="streak"><span class="streak-icon">üî•</span><span>–í–∞—à–∞ —Å–µ—Ä–∏—è: ${streak} ${getDaysWord(
            streak
          )}</span></div>
    </div>`
        : ""
    }
    <div class="nav-grid">
      <div class="nav-card" onclick="navigate('quizzes')"><div class="nav-card-icon">üéØ</div><div class="nav-card-title">–ö–≤–∏–∑—ã</div></div>
      <div class="nav-card" onclick="navigate('edu')"><div class="nav-card-icon">üìä</div><div class="nav-card-title">–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞</div></div>
      <div class="nav-card" onclick="navigate('progress')"><div class="nav-card-icon">üìà</div><div class="nav-card-title">–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</div></div>
      <div class="nav-card" onclick="navigate('achievements')"><div class="nav-card-icon">üèÜ</div><div class="nav-card-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div></div>
      <div class="nav-card" onclick="navigate('glossary')"><div class="nav-card-icon">üìö</div><div class="nav-card-title">–ì–ª–æ—Å—Å–∞—Ä–∏–π</div></div>
      <div class="nav-card" onclick="navigate('simulator')"><div class="nav-card-icon">üíº</div><div class="nav-card-title">–°–∏–º—É–ª—è—Ç–æ—Ä</div></div>
    </div>
    <div class="preview-cards">
      <div class="preview-card"><div class="preview-label">–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</div><p><strong>${completedQuizzes}</strong> –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤</p><p><strong>${
    AppState.userData.progress.glossaryViewed
  }</strong> –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤</p></div>
      <div class="preview-card"><div class="preview-label">–¢–µ–º–∞ –¥–Ω—è</div><p><strong>–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è</strong></p><p class="caption">–ò–∑—É—á–∏—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∞–∫—Ç–∏–≤—ã</p></div>
    </div>
    <div class="footer"><p class="disclaimer">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–æ—Å—è—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.</p><p class="caption">–í–µ—Ä—Å–∏—è 1.0.0</p> <p class="caption">¬©Copyright 2025 MC Recovery Fund ‚Äî designed &amp; developed by the MC
        Recovery Fund team.</p></div>
  `;
}

function renderQuizzes(container) {
  const quizzes = window.APP_DATA.quizzes;
  container.innerHTML = `
    <h1>–ö–≤–∏–∑—ã</h1>
    <p class="caption mb-lg">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö</p>
    <div class="card-grid">
      ${quizzes
        .map((quiz) => {
          const isCompleted = AppState.userData.completedQuizzes.includes(
            quiz.id
          );
          return `<div class="card card-interactive" onclick="navigate('quiz', {id: '${
            quiz.id
          }'})">
          <div style="display: flex; justify-content: space-between; align-items: start;">
            <h3>${quiz.title}</h3>${
            isCompleted ? '<span style="font-size: 24px;">‚úì</span>' : ""
          }
          </div>
          <p class="caption mb-md">${quiz.description}</p>
          <div style="display: flex; gap: var(--space-md); flex-wrap: wrap;">
            <span class="caption">üìù ${quiz.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
            <span class="caption">‚è±Ô∏è ~${quiz.duration} –º–∏–Ω</span>
            <span class="caption" style="color: ${getDifficultyColor(
              quiz.difficulty
            )}">${getDifficultyLabel(quiz.difficulty)}</span>
          </div>
        </div>`;
        })
        .join("")}
    </div>
  `;
}

function renderQuiz(container, quizId) {
  const quiz = window.APP_DATA.quizzes.find((q) => q.id === quizId);
  if (!quiz) {
    navigate("quizzes");
    return;
  }
  const isCompleted = AppState.userData.completedQuizzes.includes(quizId);
  container.innerHTML = `
    <div class="card">
      <h1>${quiz.title}</h1>
      <p>${quiz.description}</p>
      <div style="margin: var(--space-lg) 0;">
        <div style="display: flex; gap: var(--space-md); margin-bottom: var(--space-md);">
          <span class="caption">üìù ${quiz.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
          <span class="caption">‚è±Ô∏è ~${quiz.duration} –º–∏–Ω</span>
        </div>
        <p class="caption"><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${getDifficultyLabel(
          quiz.difficulty
        )}</p>
        ${
          isCompleted
            ? `<div style="margin-top: var(--space-md); padding: var(--space-md); background: var(--color-success); border-radius: var(--radius-md);"><p style="margin: 0;">‚úì –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑</p></div>`
            : ""
        }
      </div>
      <button class="btn btn-primary" onclick="startQuiz('${quizId}')" style="width: 100%;">${
    isCompleted ? "–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑" : "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑"
  }</button>
    </div>
  `;
}

function startQuiz(quizId) {
  hapticFeedback("medium");
  const quiz = window.APP_DATA.quizzes.find((q) => q.id === quizId);
  if (!quiz) return;
  AppState.currentQuiz = quiz;
  AppState.currentQuestion = 0;
  AppState.quizAnswers = [];
  navigate("quiz-question");
}

function renderQuizQuestion(container) {
  const quiz = AppState.currentQuiz;
  const questionIndex = AppState.currentQuestion;
  const question = quiz.questions[questionIndex];
  const progress = ((questionIndex + 1) / quiz.questions.length) * 100;
  container.innerHTML = `
    <div class="quiz-header">
      <span class="quiz-counter">${questionIndex + 1} / ${
    quiz.questions.length
  }</span>
      ${
        AppState.userData.streak > 0
          ? `<div class="streak"><span class="streak-icon">üî•</span><span>${AppState.userData.streak}</span></div>`
          : ""
      }
    </div>
    <div class="progress-bar"><div class="progress-fill" style="width: ${progress}%"></div></div>
    <h2 class="quiz-question">${question.question}</h2>
    <div class="quiz-options" id="quizOptions">
      ${question.options
        .map(
          (option, index) =>
            `<div class="quiz-option" data-index="${index}" onclick="selectAnswer(${index})">${option}</div>`
        )
        .join("")}
    </div>
    <div class="quiz-actions">
      <button class="btn btn-ghost" onclick="showHint()">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</button>
      <button class="btn btn-ghost" onclick="skipQuestion()">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
    </div>
    <div id="hintBox" class="hidden" style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--color-primary-light); border-radius: var(--radius-md);">
      <p><strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> ${
        question.hint || "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
      }</p>
    </div>
  `;
  if (tg?.MainButton) {
    tg.MainButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    tg.MainButton.show();
    tg.MainButton.onClick(submitAnswer);
  }
}

function selectAnswer(index) {
  hapticFeedback("light");
  document
    .querySelectorAll(".quiz-option")
    .forEach((opt) => opt.classList.remove("card-selected"));
  document
    .querySelectorAll(".quiz-option")
    [index].classList.add("card-selected");
  AppState.selectedAnswer = index;
}

function submitAnswer() {
  if (AppState.selectedAnswer === undefined) {
    hapticFeedback("error");
    return;
  }
  const quiz = AppState.currentQuiz;
  const question = quiz.questions[AppState.currentQuestion];
  const isCorrect = AppState.selectedAnswer === question.correct;
  const options = document.querySelectorAll(".quiz-option");
  options[AppState.selectedAnswer].classList.remove("card-selected");
  if (isCorrect) {
    options[AppState.selectedAnswer].classList.add("card-correct");
    hapticFeedback("success");
  } else {
    options[AppState.selectedAnswer].classList.add("card-incorrect");
    options[question.correct].classList.add("card-correct");
    hapticFeedback("error");
  }
  AppState.quizAnswers.push({
    questionIndex: AppState.currentQuestion,
    selectedAnswer: AppState.selectedAnswer,
    correct: isCorrect,
  });
  if (tg?.MainButton) tg.MainButton.hide();
  setTimeout(() => {
    AppState.currentQuestion++;
    AppState.selectedAnswer = undefined;
    if (AppState.currentQuestion < quiz.questions.length) {
      navigate("quiz-question");
    } else {
      finishQuiz();
    }
  }, 1500);
}

function showHint() {
  hapticFeedback("light");
  document.getElementById("hintBox").classList.toggle("hidden");
}

function skipQuestion() {
  hapticFeedback("light");
  AppState.quizAnswers.push({
    questionIndex: AppState.currentQuestion,
    selectedAnswer: null,
    correct: false,
  });
  AppState.currentQuestion++;
  AppState.selectedAnswer = undefined;
  if (AppState.currentQuestion < AppState.currentQuiz.questions.length) {
    navigate("quiz-question");
  } else {
    finishQuiz();
  }
}

function finishQuiz() {
  const quiz = AppState.currentQuiz;
  if (!AppState.userData.completedQuizzes.includes(quiz.id)) {
    AppState.userData.completedQuizzes.push(quiz.id);
    AppState.userData.progress.quizzes++;
  }
  updateStreak();
  checkBadges();
  saveUserData();
  navigate("quiz-result");
}

function checkBadges() {
  const badges = [
    {
      id: "first_quiz",
      condition: () => AppState.userData.completedQuizzes.length >= 1,
    },
    {
      id: "five_quizzes",
      condition: () => AppState.userData.completedQuizzes.length >= 5,
    },
    { id: "streak_7", condition: () => AppState.userData.streak >= 7 },
    { id: "streak_30", condition: () => AppState.userData.streak >= 30 },
  ];
  badges.forEach((badge) => {
    if (
      badge.condition() &&
      !AppState.userData.unlockedBadges.includes(badge.id)
    ) {
      AppState.userData.unlockedBadges.push(badge.id);
    }
  });
}

function renderQuizResult(container) {
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const percentage = Math.round((correctCount / totalQuestions) * 100);
  let badge = "ü•â",
    badgeText = "–ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
    badgeColor = "var(--color-premium)";
  if (percentage >= 90) {
    badge = "ü•á";
    badgeText = "–ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å";
    badgeColor = "var(--color-gold)";
  } else if (percentage >= 70) {
    badge = "ü•à";
    badgeText = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å";
  }
  container.innerHTML = `<div class="result-card"><h1>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!</h1><div class="result-badge"><div class="badge" style="background-color: ${badgeColor}; animation: unlockBadge var(--transition-slow);">${badge}</div></div><p class="result-score">${correctCount} / ${totalQuestions}</p><p><strong>${percentage}%</strong> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p><p class="caption">${badgeText}</p>${
    percentage < 70
      ? `<div style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--color-primary-light); border-radius: var(--radius-md);"><p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong></p><ul style="text-align: left; margin-top: var(--space-sm);"><li>–ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–¥–µ–æ"</li><li>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–ª–æ—Å—Å–∞—Ä–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤</li><li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â—ë —Ä–∞–∑</li></ul></div>`
      : ""
  }<div class="result-actions"><button class="btn btn-primary" onclick="downloadResult()">üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</button><button class="btn btn-secondary" onclick="shareResult()">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button><button class="btn btn-ghost" onclick="startQuiz('${
    quiz.id
  }')">üîÅ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑</button><button class="btn btn-ghost" onclick="navigate('quizzes')">–í—Å–µ –∫–≤–∏–∑—ã</button></div></div>`;
}

function downloadResult() {
  hapticFeedback("success");
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const resultHTML = `<html><head><meta charset="UTF-8"><style>body{font-family:Inter,sans-serif;padding:40px;background:linear-gradient(135deg,#C6D9FD 0%,white 100%)}.card{background:white;padding:40px;border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,0.1);text-align:center;max-width:400px;margin:0 auto}h1{color:#1326FD;font-size:32px}.score{font-size:48px;color:#1326FD;margin:20px 0}</style></head><body><div class="card"><h1>MC Recovery Fund</h1><p><strong>${
    quiz.title
  }</strong></p><div class="score">${correctCount}/${totalQuestions}</div><p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${Math.round(
    (correctCount / totalQuestions) * 100
  )}%</p></div></body></html>`;
  const blob = new Blob([resultHTML], { type: "text/html" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `mc-recovery-${quiz.id}-result.html`;
  a.click();
}

function shareResult() {
  hapticFeedback("light");
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const percentage = Math.round((correctCount / totalQuestions) * 100);
  const shareText = `–Ø –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ "${quiz.title}" –≤ MC Recovery Fund!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${correctCount}/${totalQuestions} (${percentage}%)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ –≤—ã!`;
  if (navigator.share) {
    navigator.share({
      title: "MC Recovery Fund - –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞",
      text: shareText,
    });
  } else if (tg) {
    tg.openTelegramLink(
      `https://t.me/share/url?text=${encodeURIComponent(shareText)}`
    );
  } else {
    alert("–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
  }
}

function renderEdu(container) {
  const topics = window.APP_DATA.edu;
  container.innerHTML = `<h1>–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–¥–µ–æ</h1><p class="caption mb-lg">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö</p><div class="card-grid">${topics
    .map(
      (topic) =>
        `<div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>${
          topic.title
        }</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>${
          topic.description
        }</p>${topic.sections
          .map(
            (section) =>
              `<div style="margin: var(--space-lg) 0; padding: var(--space-md); background: rgba(0,0,0,0.02); border-radius: var(--radius-md);"><h4>${
                section.title
              }</h4><p class="caption">${section.content}</p>${
                section.stat
                  ? `<p style="color: var(--color-success); font-weight: 600;">${section.stat}</p>`
                  : ""
              }</div>`
          )
          .join("")}${
          topic.videoUrl
            ? `<button class="btn btn-primary" onclick="openVideo('${topic.videoUrl}')">‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</button>`
            : ""
        }</div></div></div>`
    )
    .join("")}</div>`;
}

function toggleCollapsible(header) {
  hapticFeedback("light");
  const content = header.nextElementSibling;
  const icon = header.querySelector(".collapsible-icon");
  content.classList.toggle("open");
  icon.classList.toggle("open");
}

function openVideo(url) {
  hapticFeedback("light");
  if (tg) {
    tg.openLink(url);
  } else {
    window.open(url, "_blank");
  }
}

function renderProgress(container) {
  const userData = AppState.userData;
  const quizzesTotal = window.APP_DATA.quizzes.length;
  const glossaryTotal = window.APP_DATA.glossary.length;
  const quizzesPercent = Math.round(
    (userData.completedQuizzes.length / quizzesTotal) * 100
  );
  const glossaryPercent = Math.round(
    (userData.progress.glossaryViewed / glossaryTotal) * 100
  );
  container.innerHTML = `<h1>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h1>${
    userData.streak > 0
      ? `<div class="card mb-lg" style="text-align: center;"><div class="streak" style="font-size: 20px; padding: var(--space-lg);"><span class="streak-icon" style="font-size: 40px;">üî•</span><div><p style="margin: 0;"><strong>${
          userData.streak
        } ${getDaysWord(
          userData.streak
        )}</strong></p><p class="caption" style="margin: 0;">–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</p></div></div></div>`
      : ""
  }<div class="card mb-lg"><h3>–ö–≤–∏–∑—ã</h3><div class="progress-bar"><div class="progress-fill" style="width: ${quizzesPercent}%"></div></div><p class="caption">${
    userData.completedQuizzes.length
  } –∏–∑ ${quizzesTotal} –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${quizzesPercent}%)</p></div><div class="card mb-lg"><h3>–ì–ª–æ—Å—Å–∞—Ä–∏–π</h3><div class="progress-bar"><div class="progress-fill" style="width: ${glossaryPercent}%"></div></div><p class="caption">${
    userData.progress.glossaryViewed
  } –∏–∑ ${glossaryTotal} –∏–∑—É—á–µ–Ω–æ (${glossaryPercent}%)</p></div><div class="card"><h3>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3><p class="caption">${
    userData.unlockedBadges.length
  } –±–µ–π–¥–∂–µ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p><button class="btn btn-secondary" onclick="navigate('achievements')" style="width: 100%; margin-top: var(--space-md);">–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</button></div>`;
}

function renderAchievements(container) {
  const allBadges = [
    {
      id: "first_quiz",
      icon: "üéì",
      name: "–ü–µ—Ä–≤—ã–π —à–∞–≥",
      desc: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∫–≤–∏–∑",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 1 –∫–≤–∏–∑",
    },
    {
      id: "five_quizzes",
      icon: "üèÖ",
      name: "–ó–Ω–∞—Ç–æ–∫",
      desc: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 5 –∫–≤–∏–∑–æ–≤",
    },
    {
      id: "streak_7",
      icon: "üî•",
      name: "–ù–µ–¥–µ–ª—è",
      desc: "–°–µ—Ä–∏—è 7 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
    },
    {
      id: "streak_30",
      icon: "‚≠ê",
      name: "–ú–µ—Å—è—Ü",
      desc: "–°–µ—Ä–∏—è 30 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
    },
    {
      id: "perfect_quiz",
      icon: "üíé",
      name: "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç",
      desc: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –Ω–∞ 100%",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –∫–≤–∏–∑–µ",
    },
    {
      id: "glossary_master",
      icon: "üìö",
      name: "–≠—Ä—É–¥–∏—Ç",
      desc: "–ò–∑—É—á–∏—Ç–µ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–µ—Å—å –≥–ª–æ—Å—Å–∞—Ä–∏–π",
    },
  ];
  container.innerHTML = `<h1>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1><p class="caption mb-lg">–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–µ–π–¥–∂–∏, –ø—Ä–æ—Ö–æ–¥—è –∫–≤–∏–∑—ã –∏ –∏–∑—É—á–∞—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p><div class="badge-grid">${allBadges
    .map((badge) => {
      const isUnlocked = AppState.userData.unlockedBadges.includes(badge.id);
      return `<div class="badge-item"><div class="badge ${
        isUnlocked ? "" : "badge-locked"
      }">${badge.icon}</div><div class="badge-name">${
        badge.name
      }</div><div class="badge-desc">${
        isUnlocked ? badge.desc : badge.condition
      }</div></div>`;
    })
    .join("")}</div>`;
}

function renderGlossary(container) {
  const terms = window.APP_DATA.glossary;
  container.innerHTML = `<h1>–ì–ª–æ—Å—Å–∞—Ä–∏–π</h1><p class="caption mb-lg">–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</p><div class="search-box"><svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"/><path d="M21 21l-4.35-4.35"/></svg><input type="text" class="search-input" placeholder="–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤..." oninput="filterGlossary(this.value)"></div><div id="glossaryList" class="list">${terms
    .map(
      (term) =>
        `<div class="list-item" onclick="showTermDetail('${
          term.id
        }')"><div><strong>${
          term.term
        }</strong><p class="caption" style="margin: 0;">${term.definition.substring(
          0,
          80
        )}...</p></div></div>`
    )
    .join("")}</div>`;
}

function filterGlossary(query) {
  const terms = window.APP_DATA.glossary;
  const filtered = terms.filter(
    (t) =>
      t.term.toLowerCase().includes(query.toLowerCase()) ||
      t.definition.toLowerCase().includes(query.toLowerCase())
  );
  const list = document.getElementById("glossaryList");
  list.innerHTML = filtered
    .map(
      (term) =>
        `<div class="list-item" onclick="showTermDetail('${
          term.id
        }')"><div><strong>${
          term.term
        }</strong><p class="caption" style="margin: 0;">${term.definition.substring(
          0,
          80
        )}...</p></div></div>`
    )
    .join("");
}

function showTermDetail(termId) {
  hapticFeedback("light");
  const term = window.APP_DATA.glossary.find((t) => t.id === termId);
  if (!term) return;
  if (!AppState.userData.progress.glossaryViewed)
    AppState.userData.progress.glossaryViewed = 0;
  if (!AppState.userData.viewedTerms) AppState.userData.viewedTerms = [];
  if (!AppState.userData.viewedTerms.includes(termId)) {
    AppState.userData.viewedTerms.push(termId);
    AppState.userData.progress.glossaryViewed++;
    saveUserData();
  }
  const modal = document.createElement("div");
  modal.style.cssText =
    "position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center;z-index:1000;padding:20px;";
  modal.innerHTML = `<div class="card" style="max-width:500px;max-height:80vh;overflow-y:auto;"><h2>${
    term.term
  }</h2><p>${term.definition}</p>${
    term.videoUrl
      ? `<button class="btn btn-primary" onclick="openVideo('${term.videoUrl}')">‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</button>`
      : ""
  }<button class="btn btn-ghost" onclick="this.closest('div[style*=fixed]').remove()" style="width:100%;margin-top:var(--space-md);">–ó–∞–∫—Ä—ã—Ç—å</button></div>`;
  modal.onclick = (e) => {
    if (e.target === modal) modal.remove();
  };
  document.body.appendChild(modal);
}

function renderSimulator(container) {
  container.innerHTML = `<h1>–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è</h1><p class="caption mb-lg">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</p><div class="card"><p style="color: var(--color-premium); font-weight: 600;">üöÄ –°–∫–æ—Ä–æ!</p><p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤.</p><div style="margin-top: var(--space-lg);"><h4>–ß—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:</h4><ul style="margin-top: var(--space-sm);"><li>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤</li><li>–°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</li><li>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤</li><li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</li></ul></div></div>`;
}

function renderHelp(container) {
  container.innerHTML = `<h1>–ü–æ–º–æ—â—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h1><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p><p>2. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–∏–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π</p><p>3. –ò–∑—É—á–∞–π—Ç–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ –≤–∏–¥–µ–æ</p><p>4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p></div></div></div><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ü—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p><p style="margin-top: var(--space-md); font-weight: 600; color: var(--color-error);">–í–∞–∂–Ω–æ: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–æ—Å—è—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.</p></div></div></div><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É MC Recovery Fund</p></div></div></div>`;
}

function renderProfile(container) {
  const userData = AppState.userData;
  container.innerHTML = `<h1>–ü—Ä–æ—Ñ–∏–ª—å</h1><div class="card mb-lg"><h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3><p>–°–µ—Ä–∏—è: <strong>${
    userData.streak
  } ${getDaysWord(userData.streak)}</strong></p><p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–≤–∏–∑–æ–≤: <strong>${
    userData.completedQuizzes.length
  }</strong></p><p>–ë–µ–π–¥–∂–µ–π: <strong>${
    userData.unlockedBadges.length
  }</strong></p></div><div class="card mb-lg"><h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3><button class="btn btn-ghost" onclick="resetProgress()" style="width: 100%; margin-top: var(--space-md); color: var(--color-error);">–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</button></div>`;
}

function resetProgress() {
  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.")) {
    hapticFeedback("heavy");
    localStorage.removeItem("mc_recovery_user_data");
    AppState.userData = {
      streak: 0,
      lastActiveDate: null,
      completedQuizzes: [],
      unlockedBadges: [],
      progress: { quizzes: 0, eduTopics: 0, glossaryViewed: 0 },
      settings: { theme: "auto", language: "ru" },
    };
    navigate("home");
  }
}

// Theme Management
function toggleTheme() {
  const root = document.documentElement;
  const current = root.getAttribute("data-theme") || "light";
  const next = current === "light" ? "dark" : "light";

  root.setAttribute("data-theme", next);
  localStorage.setItem("theme", next);
  // –í–∞–∂–Ω–æ: —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
  root.style.removeProperty("--color-text");
  root.style.removeProperty("--color-bg");

  // Update icons
  const sunIcon = document.querySelector(".theme-icon-sun");
  const moonIcon = document.querySelector(".theme-icon-moon");

  if (next === "dark") {
    if (sunIcon) sunIcon.style.display = "none";
    if (moonIcon) moonIcon.style.display = "block";
  } else {
    if (sunIcon) sunIcon.style.display = "block";
    if (moonIcon) moonIcon.style.display = "none";
  }

  // Update Telegram theme if available
  if (tg && tg.themeParams) {
    if (next === "dark") {
      document
        .querySelector('meta[name="theme-color"]')
        ?.setAttribute("content", "#0a0f1a");
    } else {
      document
        .querySelector('meta[name="theme-color"]')
        ?.setAttribute("content", "#1326FD");
    }
  }

  hapticFeedback("light");
}

function initThemeIcons() {
  const theme = document.documentElement.getAttribute("data-theme") || "light";
  const sunIcon = document.querySelector(".theme-icon-sun");
  const moonIcon = document.querySelector(".theme-icon-moon");

  if (theme === "dark") {
    if (sunIcon) sunIcon.style.display = "none";
    if (moonIcon) moonIcon.style.display = "block";
  } else {
    if (sunIcon) sunIcon.style.display = "block";
    if (moonIcon) moonIcon.style.display = "none";
  }
}

// Initialize app
document.addEventListener("DOMContentLoaded", () => {
  loadUserData();
  initThemeIcons();

  // Theme toggle
  const themeToggle = document.getElementById("themeToggle");
  if (themeToggle) {
    themeToggle.onclick = toggleTheme;
  }

  // Back button
  document.getElementById("backBtn").onclick = () => {
    if (AppState.currentRoute.startsWith("quiz-")) {
      navigate("quizzes");
    } else {
      navigate("home");
    }
  };

  const hash = window.location.hash.substring(1) || "home";
  navigate(hash);
});
