// MC Recovery Fund - Main Application Logic
// Part 1: Core functionality and routing
// ==========================================

// Hyperliquid API Configuration
const HYPERLIQUID_API = {
  endpoint: "https://api.hyperliquid.xyz/info",
  vaultAddress: "0x914434e8a235cb608a94a5f70ab8c40927152a24",
};

// Tab Bar Configuration
const TAB_ROUTES = {
  home: { icon: "üè†", label: "–ì–ª–∞–≤–Ω–∞—è", badge: 0 },
  learn: { icon: "üìö", label: "–û–±—É—á–µ–Ω–∏–µ", badge: 0 },
  data: { icon: "üìä", label: "–î–∞–Ω–Ω—ã–µ", badge: 0 },
  progress: { icon: "üèÜ", label: "–ü—Ä–æ–≥—Ä–µ—Å—Å", badge: 0 },
  more: { icon: "‚öôÔ∏è", label: "–ï—â—ë", badge: 0 },
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Ç–∞–±–∞–º
const PAGE_TO_TAB = {
  quizzes: "learn",
  quiz: "learn",
  "quiz-question": "learn",
  "quiz-result": "learn",
  edu: "learn",
  glossary: "learn",
  faq: "learn",
  literature: "learn",
  dashboard: "data",
  broadcasts: "data",
  announcements: "data",
  documents: "data",
  "my-progress": "progress",
  achievements: "progress",
  instructions: "more",
  support: "more",
};

// ==========================================
// Performance Optimization Utilities
// ==========================================

// Render cache for memoization
const RenderCache = {
  _cache: new Map(),
  _maxSize: 50,
  
  get(key) {
    return this._cache.get(key);
  },
  
  set(key, value) {
    if (this._cache.size >= this._maxSize) {
      const firstKey = this._cache.keys().next().value;
      this._cache.delete(firstKey);
    }
    this._cache.set(key, value);
  },
  
  clear(pattern) {
    if (pattern) {
      for (const key of this._cache.keys()) {
        if (key.includes(pattern)) {
          this._cache.delete(key);
        }
      }
    } else {
      this._cache.clear();
    }
  }
};

// Ensure data module is loaded before rendering
async function ensureDataLoaded(moduleName) {
  if (!window.APP_DATA._loaded[moduleName]) {
    try {
      await window.loadDataModule(moduleName);
    } catch (err) {
      console.error(`Failed to load ${moduleName}:`, err);
      return false;
    }
  }
  return true;
}

// Batch DOM updates to minimize reflows
const BatchDOMUpdater = {
  _pending: [],
  _rafId: null,
  
  schedule(fn) {
    this._pending.push(fn);
    if (!this._rafId) {
      this._rafId = requestAnimationFrame(() => {
        const updates = this._pending.splice(0);
        this._rafId = null;
        updates.forEach(fn => fn());
      });
    }
  }
};

// Debounce function for performance
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Throttle function for scroll/resize events
function throttle(func, limit) {
  let inThrottle;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

// Global State
const AppState = {
  currentRoute: "home",
  activeTab: "home", // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è tab bar
  parentTab: null, // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–± –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
  currentQuiz: null,
  currentQuestion: 0,
  quizAnswers: [],
  userData: {
    streak: 0,
    lastActiveDate: null,
    completedQuizzes: [],
    unlockedBadges: [],
    progress: { quizzes: 0, eduTopics: 0, glossaryViewed: 0 },
    settings: { theme: "auto", language: "ru" },
  },
  vaultData: {
    positions: null,
    metrics: null,
    loading: false,
    error: null,
    lastUpdated: null,
  },
};

// Telegram WebApp Integration
let tg = null;
try {
  tg = window.Telegram?.WebApp;
  if (tg) {
    tg.ready();
    tg.expand();
    tg.enableClosingConfirmation();
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if (tg.colorScheme) {
      document.documentElement.setAttribute(
        "data-theme",
        tg.colorScheme === "dark" ? "dark" : "light"
      );
    }
    if (tg.themeParams) applyTelegramTheme(tg.themeParams);

    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–º–µ–Ω—É —Ç–µ–º—ã –≤ –∫–ª–∏–µ–Ω—Ç–µ Telegram
    tg.onEvent("themeChanged", () => {
      const scheme = tg.colorScheme === "dark" ? "dark" : "light";
      const r = document.documentElement;
      r.setAttribute("data-theme", scheme);
      // —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
      // —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
      r.style.removeProperty("--color-text");
      r.style.removeProperty("--color-bg");
      if (tg.themeParams) applyTelegramTheme(tg.themeParams);
    });
    tg.MainButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    tg.MainButton.hide();
  }
} catch (e) {
  console.log("Running outside Telegram WebApp");
}

function applyTelegramTheme(params) {
  const root = document.documentElement;
  // –ù–ï –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Ç–µ–º—ã (--color-bg/--color-text)!
  // –ê–∫—Ü–µ–Ω—Ç/–∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Telegram:
  if (params.button_color) {
    root.style.setProperty("--color-primary", params.button_color);
  }
  // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —ç–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º ¬´—Å—ã—Ä–∞—è¬ª –ø–∞–ª–∏—Ç—Ä–∞ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
  if (params.bg_color) root.style.setProperty("--tg-bg", params.bg_color);
  if (params.text_color) root.style.setProperty("--tg-text", params.text_color);
}

function hapticFeedback(type = "light") {
  try {
    if (tg?.HapticFeedback) {
      if (type === "success" || type === "error") {
        tg.HapticFeedback.notificationOccurred(type);
      } else {
        tg.HapticFeedback.impactOccurred(type);
      }
    }
  } catch (e) {}
}

function saveUserData() {
  try {
    localStorage.setItem(
      "mc_recovery_user_data",
      JSON.stringify(AppState.userData)
    );
  } catch (e) {
    console.error("Failed to save:", e);
  }
}

function loadUserData() {
  try {
    const saved = localStorage.getItem("mc_recovery_user_data");
    if (saved) {
      AppState.userData = { ...AppState.userData, ...JSON.parse(saved) };
      updateStreak();
    }
  } catch (e) {
    console.error("Failed to load:", e);
  }
}

function updateStreak() {
  const today = new Date().toDateString();
  const lastActive = AppState.userData.lastActiveDate;
  if (lastActive !== today) {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    if (lastActive === yesterday.toDateString()) {
      AppState.userData.streak += 1;
    } else if (lastActive) {
      AppState.userData.streak = 1;
    }
    AppState.userData.lastActiveDate = today;
    saveUserData();
  }
}

// ==========================================
// Tab Bar Functions
// ==========================================

function switchTab(tabName) {
  // Haptic feedback
  if (tg) tg.HapticFeedback?.impactOccurred("light");
  else hapticFeedback("light");

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤ –Ω–∞—á–∞–ª–æ –î–û —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  window.scrollTo({ top: 0, behavior: "auto" });

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  AppState.activeTab = tabName;
  AppState.currentRoute = tabName;
  AppState.parentTab = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–± –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
  localStorage.setItem("lastActiveTab", tabName);

  // –û–±–Ω–æ–≤–∏—Ç—å UI tab bar
  updateTabBar();

  // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ (–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–∞–±–µ)
  const backBtn = document.getElementById("backBtn");
  if (backBtn) backBtn.style.display = "none";

  // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–∞
  renderTabContent(tabName);
}

function updateTabBar() {
  const tabs = document.querySelectorAll(".tab-item");
  const indicator = document.querySelector(".tab-indicator");

  tabs.forEach((tab, index) => {
    const tabName = tab.dataset.tab;
    if (tabName === AppState.activeTab) {
      tab.classList.add("active");
      // –ê–Ω–∏–º–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
      if (indicator) {
        const tabWidth = tab.offsetWidth;
        const tabLeft = tab.offsetLeft;
        indicator.style.width = `${tabWidth}px`;
        indicator.style.left = `${tabLeft}px`;
      }
    } else {
      tab.classList.remove("active");
    }
  });
}

function renderTabContent(tabName) {
  const content = document.getElementById("content");

  switch (tabName) {
    case "home":
      renderHome(content);
      break;
    case "learn":
      renderLearnTab(content);
      break;
    case "data":
      renderDataTab(content);
      break;
    case "progress":
      renderProgressTab(content);
      break;
    case "more":
      renderMoreTab(content);
      break;
    default:
      renderHome(content);
  }
}

function renderTabBar() {
  const tabBar = document.getElementById("tabBar");
  if (!tabBar) return;

  const tabsHTML = Object.keys(TAB_ROUTES)
    .map((tabKey) => {
      const tab = TAB_ROUTES[tabKey];
      const isActive = AppState.activeTab === tabKey;
      return `
      <div class="tab-item ${
        isActive ? "active" : ""
      }" data-tab="${tabKey}" data-action="switchTab">
        <span class="tab-icon">${tab.icon}</span>
        <span class="tab-label">${tab.label}</span>
        ${tab.badge > 0 ? `<span class="tab-badge">${tab.badge}</span>` : ""}
      </div>
    `;
    })
    .join("");

  tabBar.innerHTML = `${tabsHTML}<div class="tab-indicator"></div>`;

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
  setTimeout(() => updateTabBar(), 50);
}

// ==========================================
// Navigation Functions
// ==========================================

function handleBackButton() {
  const currentRoute = AppState.currentRoute;

  // –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞
  if (currentRoute === "quiz-question" || currentRoute === "quiz-result") {
    navigate("quizzes");
    return;
  }

  // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–≤–∏–∑–∞
  if (currentRoute === "quiz") {
    navigate("quizzes");
    return;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–± –µ—Å–ª–∏ –µ—Å—Ç—å
  if (AppState.parentTab) {
    switchTab(AppState.parentTab);
    return;
  }

  // –ò–Ω–∞—á–µ - –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–± –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
  const parentTab = PAGE_TO_TAB[currentRoute];

  if (parentTab) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–±
    switchTab(parentTab);
  } else {
    // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∞–±–∞ –Ω–µ—Ç - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ home
    switchTab("home");
  }
}

function navigate(route, params = {}) {
  hapticFeedback("light");

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤ –Ω–∞—á–∞–ª–æ –î–û —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  window.scrollTo({ top: 0, behavior: "auto" });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–±–æ–º
  const isTabRoute = ["home", "learn", "data", "progress", "more"].includes(
    route
  );

  // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º switchTab
  if (isTabRoute) {
    switchTab(route);
    return;
  }

  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  AppState.currentRoute = route;
  window.location.hash = route;
  if (tg?.MainButton) tg.MainButton.hide();
  const backBtn = document.getElementById("backBtn");
  const tabBar = document.getElementById("tabBar");

  // Tab bar –í–°–ï–ì–î–ê –≤–∏–¥–∏–º
  if (tabBar) tabBar.style.display = "flex";

  // –í–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–±
  backBtn.style.display = "flex";
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–± –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
  if (!AppState.parentTab) {
    AppState.parentTab = AppState.activeTab;
  }

  renderRoute(route, params);
}

function renderRoute(route, params) {
  const content = document.getElementById("content");
  switch (route) {
    case "quizzes":
      renderQuizzes(content);
      break;
    case "quiz":
      renderQuiz(content, params.id);
      break;
    case "quiz-question":
      renderQuizQuestion(content);
      break;
    case "quiz-result":
      renderQuizResult(content);
      break;
    case "edu":
      renderEdu(content);
      break;
    case "my-progress":
      renderProgress(content);
      break;
    case "achievements":
      renderAchievements(content);
      break;
    case "glossary":
      renderGlossary(content);
      break;
    case "simulator":
      renderSimulator(content);
      break;
    case "help":
      renderHelp(content);
      break;
    case "profile":
      renderProfile(content);
      break;
    case "instructions":
      renderInstructions(content);
      break;
    case "announcements":
      renderAnnouncements(content);
      break;
    case "broadcasts":
      renderBroadcasts(content);
      break;
    case "dashboard":
      renderDashboard(content);
      break;
    case "support":
      renderSupport(content);
      break;
    case "documents":
      renderDocuments(content);
      break;
    case "faq":
      renderFAQ(content);
      break;
    case "literature":
      renderLiterature(content);
      break;
    default:
      // –ï—Å–ª–∏ —Ä–æ—É—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      switchTab("home");
      return; // –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä–æ–ª–ª–∏—Ç—å –ø–æ—Å–ª–µ switchTab (—Ç–∞–º —Å–≤–æ–π —Å–∫—Ä–æ–ª–ª)
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–Ω–∞ —Å–ª—É—á–∞–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
  setTimeout(() => {
    window.scrollTo({ top: 0, behavior: "auto" });
  }, 50);
}

function getDaysWord(num) {
  if (num % 10 === 1 && num % 100 !== 11) return "–¥–µ–Ω—å";
  if ([2, 3, 4].includes(num % 10) && ![12, 13, 14].includes(num % 100))
    return "–¥–Ω—è";
  return "–¥–Ω–µ–π";
}

function getDifficultyLabel(level) {
  const labels = { easy: "–õ–µ–≥–∫–∏–π", medium: "–°—Ä–µ–¥–Ω–∏–π", hard: "–°–ª–æ–∂–Ω—ã–π" };
  return labels[level] || level;
}

function getDifficultyColor(level) {
  const colors = {
    easy: "var(--color-success)",
    medium: "var(--color-primary)",
    hard: "var(--color-error)",
  };
  return colors[level] || "var(--color-text)";
}

// ==========================================
// Helper Functions for UI/UX
// ==========================================

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è APR –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 * @param {number|string} apr - –∑–Ω–∞—á–µ–Ω–∏–µ APR
 * @returns {string} - CSS –∫–ª–∞—Å—Å (apr-positive, apr-negative, apr-neutral)
 */
function getAPRClass(apr) {
  const value = parseFloat(apr);
  if (isNaN(value) || value === 0) return "apr-neutral";
  return value > 0 ? "apr-positive" : "apr-negative";
}

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –º–µ—Ç–æ–¥–æ–º Fisher-Yates
 * @param {Array} array - –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
 * @returns {Array} - –Ω–æ–≤—ã–π –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
function shuffleArray(array) {
  const shuffled = [...array]; // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// ==========================================
// Hyperliquid API Functions
// ==========================================

async function fetchHyperliquidData(requestBody) {
  try {
    const response = await fetch(HYPERLIQUID_API.endpoint, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(requestBody),
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error("Hyperliquid API error:", error);
    throw error;
  }
}

async function fetchVaultPositions() {
  return fetchHyperliquidData({
    type: "clearinghouseState",
    user: HYPERLIQUID_API.vaultAddress,
  });
}

async function fetchVaultDetails() {
  return fetchHyperliquidData({
    type: "vaultDetails",
    vaultAddress: HYPERLIQUID_API.vaultAddress,
  });
}

async function loadVaultData() {
  if (AppState.vaultData.loading) return;

  AppState.vaultData.loading = true;
  AppState.vaultData.error = null;

  try {
    const [positions, details] = await Promise.all([
      fetchVaultPositions(),
      fetchVaultDetails(),
    ]);

    AppState.vaultData.positions = positions;
    AppState.vaultData.metrics = details;
    AppState.vaultData.lastUpdated = Date.now();
    AppState.vaultData.loading = false;

    return { positions, details };
  } catch (error) {
    AppState.vaultData.error = error.message;
    AppState.vaultData.loading = false;
    throw error;
  }
}

function formatNumber(num, decimals = 2) {
  if (!num) return "0";
  const n = parseFloat(num);
  if (isNaN(n)) return "0";
  return n.toLocaleString("en-US", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  });
}

function formatCurrency(num) {
  return "$" + formatNumber(num, 2);
}

function formatPercent(num) {
  return formatNumber(num * 100, 2) + "%";
}

function renderVaultWidget() {
  const { positions, metrics, loading, error, lastUpdated } =
    AppState.vaultData;

  if (loading) {
    return `
      <div class="card vault-widget" id="vaultWidget">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-md);">
          <div>
            <h3 style="margin-bottom: 0;">üè¶ MC Recovery Vault</h3>
          </div>
          <button class="btn-icon" data-action="refreshVault" aria-label="–û–±–Ω–æ–≤–∏—Ç—å" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
            </svg>
          </button>
        </div>
        <div style="text-align: center; padding: var(--space-xl) 0;">
          <div class="spinner"></div>
          <p class="caption" style="margin-top: var(--space-md);">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    `;
  }

  if (error) {
    return `
      <div class="card vault-widget" id="vaultWidget">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-md);">
          <div>
            <h3 style="margin-bottom: 0;">üè¶ MC Recovery Vault</h3>
          </div>
          <button class="btn-icon" data-action="refreshVault" aria-label="–û–±–Ω–æ–≤–∏—Ç—å" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
            </svg>
          </button>
        </div>
        <div style="text-align: center; padding: var(--space-lg) 0;">
          <p style="color: var(--color-error);">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error}</p>
        </div>
      </div>
    `;
  }

  if (!positions || !metrics) {
    return `
      <div class="card vault-widget" id="vaultWidget">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-md);">
          <div>
            <h3 style="margin-bottom: 0;">üè¶ MC Recovery Vault</h3>
          </div>
          <button class="btn-icon" data-action="refreshVault" aria-label="–û–±–Ω–æ–≤–∏—Ç—å" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
            </svg>
          </button>
        </div>
        <div style="text-align: center; padding: var(--space-lg) 0;">
          <p class="caption">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–∏—Ç—å.</p>
        </div>
      </div>
    `;
  }

  // Extract metrics
  const accountValue = positions.marginSummary?.accountValue || "0";
  const totalMarginUsed = positions.marginSummary?.totalMarginUsed || "0";
  const totalNtlPos = positions.marginSummary?.totalNtlPos || "0";
  const apr = metrics.apr || 0;

  // Get portfolio data for allTime PnL
  const allTimeData = metrics.portfolio?.find(
    ([period]) => period === "allTime"
  )?.[1];
  const pnlHistory = allTimeData?.pnlHistory || [];
  const latestPnl =
    pnlHistory.length > 0 ? pnlHistory[pnlHistory.length - 1][1] : "0";

  // Open positions
  const openPositions =
    positions.assetPositions?.filter((ap) => ap.position) || [];

  const lastUpdateTime = lastUpdated
    ? new Date(lastUpdated).toLocaleTimeString("ru-RU")
    : "";

  return `
    <div class="card vault-widget" id="vaultWidget">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-md);">
        <div>
          <h3 style="margin-bottom: var(--space-xs);">üè¶ MC Recovery Vault</h3>
          ${
            lastUpdateTime
              ? `<span class="caption" style="font-size: 12px;">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}</span>`
              : ""
          }
        </div>
        <button class="btn-icon" data-action="refreshVault" aria-label="–û–±–Ω–æ–≤–∏—Ç—å" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
          </svg>
        </button>
      </div>
      
      <div class="vault-metrics">
        <div class="vault-metric">
          <span class="caption">Account Value</span>
          <strong style="font-size: 20px; color: var(--color-success);">${formatCurrency(
            accountValue
          )}</strong>
        </div>
        <div class="vault-metric">
          <span class="caption">APR</span>
          <strong style="font-size: 18px;" class="${getAPRClass(
            apr
          )}">${formatPercent(apr)}</strong>
        </div>
        <div class="vault-metric">
          <span class="caption">All-Time PnL</span>
          <strong style="font-size: 18px; color: ${
            parseFloat(latestPnl) >= 0
              ? "var(--color-success)"
              : "var(--color-error)"
          };">$
            ${formatNumber(latestPnl)}</strong>
        </div>
      </div>
      
      <div style="margin-top: var(--space-lg);">
        <h4 style="font-size: 16px; margin-bottom: var(--space-sm);">–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (${
          openPositions.length
        })</h4>
        ${
          openPositions.length === 0
            ? '<p class="caption">–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</p>'
            : `<div class="vault-positions">
              ${openPositions
                .map((ap) => {
                  const pos = ap.position;
                  const pnl = parseFloat(pos.unrealizedPnl || 0);
                  const isProfit = pnl >= 0;
                  return `
                  <div class="vault-position">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                      <span style="font-weight: 600;">${pos.coin}</span>
                      <span style="color: ${
                        isProfit ? "var(--color-success)" : "var(--color-error)"
                      }; font-weight: 600;">
                        ${isProfit ? "+" : ""}${formatCurrency(pnl)}
                      </span>
                    </div>
                    <div style="display: flex; gap: var(--space-md); margin-top: var(--space-xs);">
                      <span class="caption">Size: ${pos.szi}</span>
                      <span class="caption">Entry: $${formatNumber(
                        pos.entryPx
                      )}</span>
                      <span class="caption">Leverage: ${
                        pos.leverage?.value || "N/A"
                      }x</span>
                    </div>
                  </div>
                `;
                })
                .join("")}
            </div>`
        }
      </div>
      
      <div style="margin-top: var(--space-md);">
        <a href="https://app.hyperliquid.xyz/vaults/${
          HYPERLIQUID_API.vaultAddress
        }" 
           class="btn btn-primary" 
           data-action="openLink" 
           data-url="https://app.hyperliquid.xyz/vaults/${
             HYPERLIQUID_API.vaultAddress
           }"
           style="width: 100%; text-align: center; text-decoration: none; display: block;">
          üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Hyperliquid
        </a>
      </div>
    </div>
  `;
}

// ==========================================
// Tab Content Renderers
// ==========================================

function renderHome(container) {
  const streak = AppState.userData.streak;
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">MC Recovery Fund</h1>
      <p class="hero-subtitle">–í–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
      ${
        streak > 0
          ? `<div style="display: flex; justify-content: center; margin-top: var(--space-md);">
        <div class="streak"><span class="streak-icon">üî•</span><span>–°–µ—Ä–∏—è: ${streak} ${getDaysWord(
              streak
            )}</span></div>
      </div>`
          : ""
      }
    </div>

    <!-- –ü–†–ò–û–†–ò–¢–ï–¢ 1: Vault Widget (–í–°–ï–ì–î–ê –Ω–∞ –≥–ª–∞–≤–Ω–æ–π!) -->
    <div class="priority-section">
      ${renderVaultWidget()}
    </div>

    <!-- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø -->
    <section class="content-section">
      <h2 class="section-title">‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h2>
      <div class="quick-access">
        <div class="nav-card" data-action="navigate" data-route="instructions">
          <div class="nav-card-icon">üìñ</div>
          <div class="nav-card-title">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="dashboard">
          <div class="nav-card-icon">üìä</div>
          <div class="nav-card-title">–î–∞—à–±–æ—Ä–¥</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="broadcasts">
          <div class="nav-card-icon">üì°</div>
          <div class="nav-card-title">–≠—Ñ–∏—Ä—ã</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="announcements">
          <div class="nav-card-icon">üì¢</div>
          <div class="nav-card-title">–ê–Ω–æ–Ω—Å—ã</div>
        </div>
      </div>
    </section>
  `;
}

function renderLearnTab(container) {
  const completedQuizzes = AppState.userData.completedQuizzes.length;
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">üìö –û–±—É—á–µ–Ω–∏–µ</h1>
      <p class="hero-subtitle">–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è</p>
    </div>

    <section class="content-section">
      <h2 class="section-title">üéØ –ö–≤–∏–∑—ã</h2>
      <div class="nav-grid-compact">
        <div class="nav-card" data-action="navigate" data-route="quizzes">
          <div class="nav-card-icon">üéØ</div>
          <div class="nav-card-title">–í—Å–µ –∫–≤–∏–∑—ã</div>
          <p class="caption" style="margin: var(--space-xs) 0 0 0; font-size: 12px;">${completedQuizzes} –ø—Ä–æ–π–¥–µ–Ω–æ</p>
        </div>
      </div>
    </section>

    <section class="content-section">
      <h2 class="section-title">üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
      <div class="nav-grid-compact">
        <div class="nav-card" data-action="navigate" data-route="edu">
          <div class="nav-card-icon">üéì</div>
          <div class="nav-card-title">–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="glossary">
          <div class="nav-card-icon">üìö</div>
          <div class="nav-card-title">–ì–ª–æ—Å—Å–∞—Ä–∏–π</div>
          <p class="caption" style="margin: var(--space-xs) 0 0 0; font-size: 12px;">${
            AppState.userData.progress.glossaryViewed || 0
          } / ${window.APP_DATA?.glossary?.length || 0} —Ç–µ—Ä–º–∏–Ω–æ–≤</p>
        </div>
        <div class="nav-card" data-action="navigate" data-route="literature">
          <div class="nav-card-icon">üìö</div>
          <div class="nav-card-title">–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞</div>
          <p class="caption" style="margin: var(--space-xs) 0 0 0; font-size: 12px;">–ö–Ω–∏–≥–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</p>
        </div>
        <div class="nav-card" data-action="navigate" data-route="faq">
          <div class="nav-card-icon">‚ùì</div>
          <div class="nav-card-title">FAQ</div>
        </div>
      </div>
    </section>
  `;
}

function renderDataTab(container) {
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">üìä –î–∞–Ω–Ω—ã–µ</h1>
      <p class="hero-subtitle">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</p>
    </div>

    <section class="content-section">
      <h2 class="section-title">üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
      <div class="nav-grid-compact">
        <div class="nav-card" data-action="navigate" data-route="dashboard">
          <div class="nav-card-icon">üìä</div>
          <div class="nav-card-title">–î–∞—à–±–æ—Ä–¥</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="broadcasts">
          <div class="nav-card-icon">üì°</div>
          <div class="nav-card-title">–≠—Ñ–∏—Ä—ã</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="announcements">
          <div class="nav-card-icon">üì¢</div>
          <div class="nav-card-title">–ê–Ω–æ–Ω—Å—ã</div>
        </div>
      </div>
    </section>

    <section class="content-section">
      <h2 class="section-title">üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã</h2>
      <div class="nav-grid-compact">
        <div class="nav-card" data-action="navigate" data-route="documents">
          <div class="nav-card-icon">üìÑ</div>
          <div class="nav-card-title">–î–æ–∫—É–º–µ–Ω—Ç—ã</div>
        </div>
      </div>
    </section>
  `;
}

function renderProgressTab(container) {
  const completedQuizzes = AppState.userData.completedQuizzes.length;
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h1>
      <p class="hero-subtitle">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p>
    </div>

    <section class="content-section">
      <h2 class="section-title">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
      <div class="nav-grid-compact">
        <div class="nav-card" data-action="navigate" data-route="my-progress">
          <div class="nav-card-icon">üìà</div>
          <div class="nav-card-title">–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
          <p class="caption" style="margin: var(--space-xs) 0 0 0; font-size: 12px;">${completedQuizzes} –∫–≤–∏–∑–æ–≤</p>
        </div>
        <div class="nav-card" data-action="navigate" data-route="achievements">
          <div class="nav-card-icon">üèÜ</div>
          <div class="nav-card-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div>
          <p class="caption" style="margin: var(--space-xs) 0 0 0; font-size: 12px;">${AppState.userData.unlockedBadges.length} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p>
        </div>
      </div>
    </section>
  `;
}

function renderMoreTab(container) {
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">‚öôÔ∏è –ï—â—ë</h1>
      <p class="hero-subtitle">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</p>
    </div>

    <section class="content-section">
      <h2 class="section-title">üìñ –†–µ—Å—É—Ä—Å—ã</h2>
      <div class="nav-grid-compact">
        <div class="nav-card" data-action="navigate" data-route="instructions">
          <div class="nav-card-icon">üìñ</div>
          <div class="nav-card-title">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</div>
        </div>
        <div class="nav-card" data-action="navigate" data-route="support">
          <div class="nav-card-icon">üí¨</div>
          <div class="nav-card-title">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</div>
        </div>
      </div>
    </section>

    <div class="footer" style="margin-top: var(--space-xl);">
      <p class="disclaimer">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–æ—Å—è—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.</p>
      <p class="caption">–í–µ—Ä—Å–∏—è 2.0.0</p>
      <p class="caption">¬©Copyright 2025 MC Recovery Fund</p>
    </div>
  `;
}

function renderQuizzes(container) {
  const quizzes = window.APP_DATA.quizzes || [];
  container.innerHTML = `
    <h1>–ö–≤–∏–∑—ã</h1>
    <p class="caption mb-lg">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö</p>
    <div class="card-grid">
      ${quizzes
        .map((quiz) => {
          const isCompleted = AppState.userData.completedQuizzes.includes(
            quiz.id
          );
          return `<div class="card card-interactive" data-action="navigate" data-route="quiz" data-quiz-id="${
            quiz.id || "unknown"
          }">
          <div style="display: flex; justify-content: space-between; align-items: start;">
            <h3>${quiz.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</h3>${
            isCompleted ? '<span style="font-size: 24px;">‚úì</span>' : ""
          }
          </div>
          <p class="caption mb-md">${quiz.description || ""}</p>
          <div style="display: flex; gap: var(--space-md); flex-wrap: wrap;">
            <span class="caption">üìù ${
              (quiz.questions || []).length
            } –≤–æ–ø—Ä–æ—Å–æ–≤</span>
            <span class="caption">‚è±Ô∏è ~${quiz.duration || "‚Äî"} –º–∏–Ω</span>
            <span class="caption" style="color: ${getDifficultyColor(
              quiz.difficulty
            )}">${getDifficultyLabel(quiz.difficulty || "medium")}</span>
          </div>
        </div>`;
        })
        .join("")}
    </div>
  `;
}

function renderQuiz(container, quizId) {
  const quiz = window.APP_DATA.quizzes.find((q) => q.id === quizId);
  if (!quiz) {
    navigate("quizzes");
    return;
  }
  const isCompleted = AppState.userData.completedQuizzes.includes(quizId);
  container.innerHTML = `
    <div class="card">
      <h1>${quiz.title}</h1>
      <p>${quiz.description}</p>
      <div style="margin: var(--space-lg) 0;">
        <div style="display: flex; gap: var(--space-md); margin-bottom: var(--space-md);">
          <span class="caption">üìù ${quiz.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
          <span class="caption">‚è±Ô∏è ~${quiz.duration} –º–∏–Ω</span>
        </div>
        <p class="caption"><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${getDifficultyLabel(
          quiz.difficulty
        )}</p>
        ${
          isCompleted
            ? `<div style="margin-top: var(--space-md); padding: var(--space-md); background: var(--color-success); border-radius: var(--radius-md);"><p style="margin: 0;">‚úì –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑</p></div>`
            : ""
        }
      </div>
      <button class="btn btn-primary" data-action="startQuiz" data-quiz-id="${quizId}" style="width: 100%;">${
    isCompleted ? "–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑" : "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑"
  }</button>
    </div>
  `;
}

function startQuiz(quizId) {
  hapticFeedback("medium");
  const quiz = window.APP_DATA.quizzes.find((q) => q.id === quizId);
  if (!quiz) return;
  AppState.currentQuiz = quiz;
  AppState.currentQuestion = 0;
  AppState.quizAnswers = [];
  navigate("quiz-question");
}

function renderQuizQuestion(container) {
  const quiz = AppState.currentQuiz;
  const questionIndex = AppState.currentQuestion;
  const question = quiz.questions[questionIndex];
  const progress = ((questionIndex + 1) / quiz.questions.length) * 100;

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const shuffledOptions = shuffleArray(question.options);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
  const correctAnswerText = question.options[question.correct];
  const newCorrectIndex = shuffledOptions.indexOf(correctAnswerText);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  AppState.currentQuestionCorrectIndex = newCorrectIndex;

  container.innerHTML = `
    <div class="quiz-header">
      <span class="quiz-counter">${questionIndex + 1} / ${
    quiz.questions.length
  }</span>
      ${
        AppState.userData.streak > 0
          ? `<div class="streak"><span class="streak-icon">üî•</span><span>${AppState.userData.streak}</span></div>`
          : ""
      }
    </div>
    <div class="progress-bar"><div class="progress-fill" style="width: ${progress}%"></div></div>
    <h2 class="quiz-question">${question.question}</h2>
    <div class="quiz-options" id="quizOptions">
      ${shuffledOptions
        .map(
          (option, index) =>
            `<div class="quiz-option" data-index="${index}" data-action="selectAnswer">${option}</div>`
        )
        .join("")}
    </div>
    <div class="quiz-actions">
      <button class="btn btn-ghost" data-action="showHint">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</button>
      <button class="btn btn-ghost" data-action="skipQuestion">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
    </div>
    <div id="hintBox" class="hidden" style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--color-primary-light); border-radius: var(--radius-md);">
      <p><strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> ${
        question.hint || "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
      }</p>
    </div>
  `;
  if (tg?.MainButton) {
    tg.MainButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    tg.MainButton.show();
    tg.MainButton.onClick(submitAnswer);
  }
}

function selectAnswer(index) {
  hapticFeedback("light");
  document
    .querySelectorAll(".quiz-option")
    .forEach((opt) => opt.classList.remove("card-selected"));
  document
    .querySelectorAll(".quiz-option")
    [index].classList.add("card-selected");
  AppState.selectedAnswer = index;
}

function submitAnswer() {
  if (AppState.selectedAnswer === undefined) {
    hapticFeedback("error");
    return;
  }
  const quiz = AppState.currentQuiz;
  const question = quiz.questions[AppState.currentQuestion];
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è)
  const isCorrect =
    AppState.selectedAnswer === AppState.currentQuestionCorrectIndex;
  const options = document.querySelectorAll(".quiz-option");
  options[AppState.selectedAnswer].classList.remove("card-selected");
  if (isCorrect) {
    options[AppState.selectedAnswer].classList.add("card-correct");
    hapticFeedback("success");
  } else {
    options[AppState.selectedAnswer].classList.add("card-incorrect");
    options[AppState.currentQuestionCorrectIndex].classList.add("card-correct");
    hapticFeedback("error");
  }
  AppState.quizAnswers.push({
    questionIndex: AppState.currentQuestion,
    selectedAnswer: AppState.selectedAnswer,
    correct: isCorrect,
  });
  if (tg?.MainButton) tg.MainButton.hide();
  setTimeout(() => {
    AppState.currentQuestion++;
    AppState.selectedAnswer = undefined;
    if (AppState.currentQuestion < quiz.questions.length) {
      navigate("quiz-question");
    } else {
      finishQuiz();
    }
  }, 1500);
}

function showHint() {
  hapticFeedback("light");
  document.getElementById("hintBox").classList.toggle("hidden");
}

function skipQuestion() {
  hapticFeedback("light");
  AppState.quizAnswers.push({
    questionIndex: AppState.currentQuestion,
    selectedAnswer: null,
    correct: false,
  });
  AppState.currentQuestion++;
  AppState.selectedAnswer = undefined;
  if (AppState.currentQuestion < AppState.currentQuiz.questions.length) {
    navigate("quiz-question");
  } else {
    finishQuiz();
  }
}

function finishQuiz() {
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const percentage = Math.round((correctCount / totalQuestions) * 100);

  if (!AppState.userData.completedQuizzes.includes(quiz.id)) {
    AppState.userData.completedQuizzes.push(quiz.id);
    AppState.userData.progress.quizzes++;
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ (100%)
  if (percentage === 100) {
    if (!AppState.userData.perfectQuizzes) {
      AppState.userData.perfectQuizzes = 0;
    }
    AppState.userData.perfectQuizzes++;
  }

  updateStreak();
  checkBadges();
  saveUserData();
  navigate("quiz-result");
}

function checkBadges() {
  const badges = [
    // –ö–≤–∏–∑—ã
    {
      id: "first_quiz",
      condition: () => AppState.userData.completedQuizzes.length >= 1,
    },
    {
      id: "quiz_3",
      condition: () => AppState.userData.completedQuizzes.length >= 3,
    },
    {
      id: "quiz_5",
      condition: () => AppState.userData.completedQuizzes.length >= 5,
    },
    {
      id: "quiz_10",
      condition: () => AppState.userData.completedQuizzes.length >= 10,
    },
    {
      id: "quiz_20",
      condition: () => AppState.userData.completedQuizzes.length >= 20,
    },
    {
      id: "quiz_50",
      condition: () => AppState.userData.completedQuizzes.length >= 50,
    },
    {
      id: "perfect_quiz",
      condition: () => (AppState.userData.perfectQuizzes || 0) >= 1,
    },
    {
      id: "perfect_3",
      condition: () => (AppState.userData.perfectQuizzes || 0) >= 3,
    },
    {
      id: "perfect_10",
      condition: () => (AppState.userData.perfectQuizzes || 0) >= 10,
    },

    // –°–µ—Ä–∏–∏
    { id: "streak_3", condition: () => AppState.userData.streak >= 3 },
    { id: "streak_7", condition: () => AppState.userData.streak >= 7 },
    { id: "streak_14", condition: () => AppState.userData.streak >= 14 },
    { id: "streak_30", condition: () => AppState.userData.streak >= 30 },
    { id: "streak_60", condition: () => AppState.userData.streak >= 60 },
    { id: "streak_100", condition: () => AppState.userData.streak >= 100 },
    { id: "streak_365", condition: () => AppState.userData.streak >= 365 },

    // –ì–ª–æ—Å—Å–∞—Ä–∏–π
    {
      id: "glossary_10",
      condition: () => AppState.userData.progress.glossaryViewed >= 10,
    },
    {
      id: "glossary_25",
      condition: () => AppState.userData.progress.glossaryViewed >= 25,
    },
    {
      id: "glossary_50",
      condition: () => AppState.userData.progress.glossaryViewed >= 50,
    },
    {
      id: "glossary_master",
      condition: () => {
        const total = window.APP_DATA?.glossary?.length || 100;
        return AppState.userData.progress.glossaryViewed >= total;
      },
    },

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    { id: "first_visit", condition: () => true }, // –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    {
      id: "explorer",
      condition: () => (AppState.userData.visitedSections || []).length >= 12,
    },

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    {
      id: "completionist",
      condition: () => AppState.userData.unlockedBadges.length >= 40,
    },
  ];

  badges.forEach((badge) => {
    if (
      badge.condition() &&
      !AppState.userData.unlockedBadges.includes(badge.id)
    ) {
      AppState.userData.unlockedBadges.push(badge.id);
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      showBadgeNotification(badge.id);
    }
  });
}

function showBadgeNotification(badgeId) {
  // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
  hapticFeedback("success");
  console.log(`üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${badgeId}`);
}

function renderQuizResult(container) {
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const percentage = Math.round((correctCount / totalQuestions) * 100);
  let badge = "ü•â",
    badgeText = "–ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
    badgeColor = "var(--color-premium)";
  if (percentage >= 90) {
    badge = "ü•á";
    badgeText = "–ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å";
    badgeColor = "var(--color-gold)";
  } else if (percentage >= 70) {
    badge = "ü•à";
    badgeText = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å";
  }
  container.innerHTML = `<div class="result-card"><h1>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!</h1><div class="result-badge"><div class="badge" style="background-color: ${badgeColor}; animation: unlockBadge var(--transition-slow);">${badge}</div></div><p class="result-score">${correctCount} / ${totalQuestions}</p><p><strong>${percentage}%</strong> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p><p class="caption">${badgeText}</p>${
    percentage < 70
      ? `<div style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--color-primary-light); border-radius: var(--radius-md);"><p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong></p><ul style="text-align: left; margin-top: var(--space-sm);"><li>–ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–¥–µ–æ"</li><li>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–ª–æ—Å—Å–∞—Ä–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤</li><li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â—ë —Ä–∞–∑</li></ul></div>`
      : ""
  }<div class="result-actions"><button class="btn btn-primary" data-action="downloadResult">üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</button><button class="btn btn-secondary" data-action="shareResult">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button><button class="btn btn-ghost" data-action="startQuiz" data-quiz-id="${
    quiz.id
  }"> üîÅ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑</button><button class="btn btn-ghost" data-action="navigate" data-route="quizzes">–í—Å–µ –∫–≤–∏–∑—ã</button></div></div>`;
}

function downloadResult() {
  hapticFeedback("success");
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const resultHTML = `<html><head><meta charset="UTF-8"><style>body{font-family:Inter,sans-serif;padding:40px;background:linear-gradient(135deg,#C6D9FD 0%,white 100%)}.card{background:white;padding:40px;border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,0.1);text-align:center;max-width:400px;margin:0 auto}h1{color:#1326FD;font-size:32px}.score{font-size:48px;color:#1326FD;margin:20px 0}</style></head><body><div class="card"><h1>MC Recovery Fund</h1><p><strong>${
    quiz.title
  }</strong></p><div class="score">${correctCount}/${totalQuestions}</div><p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${Math.round(
    (correctCount / totalQuestions) * 100
  )}%</p></div></body></html>`;
  const blob = new Blob([resultHTML], { type: "text/html" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `mc-recovery-${quiz.id}-result.html`;
  a.click();
}

function shareResult() {
  hapticFeedback("light");
  if (navigator.share && AppState.currentQuiz) {
    const quiz = AppState.currentQuiz;
    const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
    const totalQuestions = quiz.questions.length;
    const percentage = Math.round((correctCount / totalQuestions) * 100);
    navigator
      .share({
        title: `MC Recovery Fund - ${quiz.title}`,
        text: `–Ø –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ "${quiz.title}" –∏ –Ω–∞–±—Ä–∞–ª ${percentage}%! –ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã!`,
      })
      .catch(() => {});
  } else {
    alert("–§—É–Ω–∫—Ü–∏—è share –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
  }
}

async function renderEdu(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('edu');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const topics = window.APP_DATA.edu;
  container.innerHTML = `<h1>–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–¥–µ–æ</h1><p class="caption mb-lg">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö</p><div class="card-grid">${topics
    .map(
      (topic) =>
        `<div class="collapsible"><div class="collapsible-header" data-action="toggleCollapsible"><span><strong>${
          topic.title
        }</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>${
          topic.description
        }</p>${topic.sections
          .map(
            (section) =>
              `<div style="margin: var(--space-lg) 0; padding: var(--space-md); background: rgba(0,0,0,0.02); border-radius: var(--radius-md);"><h4>${
                section.title
              }</h4><p class="caption">${section.content}</p>${
                section.stat
                  ? `<p style="color: var(--color-success); font-weight: 600;">${section.stat}</p>`
                  : ""
              }</div>`
          )
          .join("")}${
          topic.videoUrl
            ? `<button class="btn btn-primary" data-action="openVideo" data-url="${topic.videoUrl}">‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</button>`
            : ""
        }</div></div></div>`
    )
    .join("")}</div>`;
}

function toggleCollapsible(header) {
  hapticFeedback("light");
  const content = header.nextElementSibling;
  const icon = header.querySelector(".collapsible-icon");
  content.classList.toggle("open");
  icon.classList.toggle("open");
}

function openVideo(url) {
  hapticFeedback("light");
  if (tg) {
    tg.openLink(url);
  } else {
    window.open(url, "_blank");
  }
}

function renderProgress(container) {
  const userData = AppState.userData;
  const quizzesTotal = window.APP_DATA.quizzes.length;
  const glossaryTotal = window.APP_DATA.glossary.length;
  const quizzesPercent = Math.round(
    (userData.completedQuizzes.length / quizzesTotal) * 100
  );
  const glossaryPercent = Math.round(
    (userData.progress.glossaryViewed / glossaryTotal) * 100
  );
  container.innerHTML = `<h1>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h1>${
    userData.streak > 0
      ? `<div class="card mb-lg" style="text-align: center;"><div class="streak" style="font-size: 20px; padding: var(--space-lg);"><span class="streak-icon" style="font-size: 40px;">üî•</span><div><p style="margin: 0;"><strong>${
          userData.streak
        } ${getDaysWord(
          userData.streak
        )}</strong></p><p class="caption" style="margin: 0;">–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</p></div></div></div>`
      : ""
  }<div class="card mb-lg"><h3>–ö–≤–∏–∑—ã</h3><div class="progress-bar"><div class="progress-fill" style="width: ${quizzesPercent}%"></div></div><p class="caption">${
    userData.completedQuizzes.length
  } –∏–∑ ${quizzesTotal} –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${quizzesPercent}%)</p></div><div class="card mb-lg"><h3>–ì–ª–æ—Å—Å–∞—Ä–∏–π</h3><div class="progress-bar"><div class="progress-fill" style="width: ${glossaryPercent}%"></div></div><p class="caption">${
    userData.progress.glossaryViewed
  } –∏–∑ ${glossaryTotal} –∏–∑—É—á–µ–Ω–æ (${glossaryPercent}%)</p></div><div class="card"><h3>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3><p class="caption">${
    userData.unlockedBadges.length
  } –±–µ–π–¥–∂–µ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p><button class="btn btn-secondary" data-action="navigate" data-route="achievements" style="width: 100%; margin-top: var(--space-md);">–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</button></div>`;
}

function renderAchievements(container) {
  const allBadges = [
    // üéØ –ö–≤–∏–∑—ã (12 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "first_quiz",
      icon: "üéì",
      name: "–ü–µ—Ä–≤—ã–π —à–∞–≥",
      desc: "–ó–∞–≤–µ—Ä—à—ë–Ω –ø–µ—Ä–≤—ã–π –∫–≤–∏–∑",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 1 –∫–≤–∏–∑",
      category: "quiz",
    },
    {
      id: "quiz_3",
      icon: "üìù",
      name: "–ù–æ–≤–∏—á–æ–∫",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 3 –∫–≤–∏–∑–∞",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 3 –∫–≤–∏–∑–∞",
      category: "quiz",
    },
    {
      id: "quiz_5",
      icon: "üèÖ",
      name: "–ó–Ω–∞—Ç–æ–∫",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 5 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 5 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "quiz_10",
      icon: "üéñÔ∏è",
      name: "–≠–∫—Å–ø–µ—Ä—Ç",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 10 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 10 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "quiz_20",
      icon: "üèÜ",
      name: "–ú–∞—Å—Ç–µ—Ä",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 20 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 20 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "quiz_50",
      icon: "üëë",
      name: "–õ–µ–≥–µ–Ω–¥–∞",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 50 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 50 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "perfect_quiz",
      icon: "üíé",
      name: "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç",
      desc: "100% –≤ –∫–≤–∏–∑–µ",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –∫–≤–∏–∑–µ",
      category: "quiz",
    },
    {
      id: "perfect_3",
      icon: "üí†",
      name: "–ë–µ–∑—É–ø—Ä–µ—á–Ω—ã–π",
      desc: "3 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–∞",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ 3 –∫–≤–∏–∑–∞—Ö",
      category: "quiz",
    },
    {
      id: "perfect_10",
      icon: "‚ú®",
      name: "–ù–µ–ø–æ–±–µ–¥–∏–º—ã–π",
      desc: "10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–æ–≤",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ 10 –∫–≤–∏–∑–∞—Ö",
      category: "quiz",
    },
    {
      id: "speed_demon",
      icon: "‚ö°",
      name: "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π",
      desc: "–ö–≤–∏–∑ –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
      category: "quiz",
    },
    {
      id: "no_hints",
      icon: "üß†",
      name: "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π",
      desc: "–ö–≤–∏–∑ –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Å–∫–∞–∑–∫–∏",
      category: "quiz",
    },
    {
      id: "comeback",
      icon: "üîÑ",
      name: "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ",
      desc: "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ",
      condition: "–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ —Å –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
      category: "quiz",
    },

    // üî• –°–µ—Ä–∏–∏ (10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "streak_3",
      icon: "üî•",
      name: "–¢—Ä–∏ –¥–Ω—è",
      desc: "–°–µ—Ä–∏—è 3 –¥–Ω—è",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_7",
      icon: "üåü",
      name: "–ù–µ–¥–µ–ª—è",
      desc: "–°–µ—Ä–∏—è 7 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_14",
      icon: "üí´",
      name: "–î–≤–µ –Ω–µ–¥–µ–ª–∏",
      desc: "–°–µ—Ä–∏—è 14 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_30",
      icon: "‚≠ê",
      name: "–ú–µ—Å—è—Ü",
      desc: "–°–µ—Ä–∏—è 30 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_60",
      icon: "üå†",
      name: "–î–≤–∞ –º–µ—Å—è—Ü–∞",
      desc: "–°–µ—Ä–∏—è 60 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 60 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_100",
      icon: "üéÜ",
      name: "–°–æ—Ç–Ω—è",
      desc: "–°–µ—Ä–∏—è 100 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_365",
      icon: "üéá",
      name: "–ì–æ–¥ –≤–º–µ—Å—Ç–µ",
      desc: "–°–µ—Ä–∏—è 365 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ –≥–æ–¥ –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "early_bird",
      icon: "üåÖ",
      name: "–†–∞–Ω–Ω—è—è –ø—Ç–∏—Ü–∞",
      desc: "–í—Ö–æ–¥ –¥–æ 6 —É—Ç—Ä–∞",
      condition: "–ó–∞–π–¥–∏—Ç–µ –¥–æ 6:00 —É—Ç—Ä–∞",
      category: "streak",
    },
    {
      id: "night_owl",
      icon: "ü¶â",
      name: "–ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
      desc: "–í—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏",
      condition: "–ó–∞–π–¥–∏—Ç–µ –ø–æ—Å–ª–µ 00:00",
      category: "streak",
    },
    {
      id: "weekend_warrior",
      icon: "üéÆ",
      name: "–í—ã—Ö–æ–¥–Ω–æ–π –≤–æ–∏–Ω",
      desc: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
      condition: "–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã –≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      category: "streak",
    },

    // üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π (8 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "glossary_10",
      icon: "üìñ",
      name: "–ß–∏—Ç–∞—Ç–µ–ª—å",
      desc: "–ò–∑—É—á–µ–Ω–æ 10 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 10 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "glossary_25",
      icon: "üìï",
      name: "–°—Ç—É–¥–µ–Ω—Ç",
      desc: "–ò–∑—É—á–µ–Ω–æ 25 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 25 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "glossary_50",
      icon: "üìó",
      name: "–ì—Ä–∞–º–æ—Ç–Ω—ã–π",
      desc: "–ò–∑—É—á–µ–Ω–æ 50 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 50 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "glossary_master",
      icon: "üìö",
      name: "–≠—Ä—É–¥–∏—Ç",
      desc: "–í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑—É—á–µ–Ω—ã",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–µ—Å—å –≥–ª–æ—Å—Å–∞—Ä–∏–π",
      category: "glossary",
    },
    {
      id: "search_master",
      icon: "üîç",
      name: "–ò—Å–∫–∞—Ç–µ–ª—å",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞",
      condition: "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏ 10 —Ä–∞–∑",
      category: "glossary",
    },
    {
      id: "video_watcher",
      icon: "üé¨",
      name: "–ó—Ä–∏—Ç–µ–ª—å",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ",
      condition: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 5 –≤–∏–¥–µ–æ –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è",
      category: "glossary",
    },
    {
      id: "definition_expert",
      icon: "üìù",
      name: "–ó–Ω–∞—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π",
      desc: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 20 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "quick_learner",
      icon: "üí°",
      name: "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å",
      condition: "–ò–∑—É—á–∏—Ç–µ 10 —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å",
      category: "glossary",
    },

    // üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (7 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "edu_visitor",
      icon: "üëÄ",
      name: "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π",
      desc: "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞",
      category: "education",
    },
    {
      id: "edu_explorer",
      icon: "üó∫Ô∏è",
      name: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º",
      category: "education",
    },
    {
      id: "video_fan",
      icon: "üìπ",
      name: "–í–∏–¥–µ–æ–ª—é–±–∏—Ç–µ–ª—å",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ",
      condition: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 10 –≤–∏–¥–µ–æ",
      category: "education",
    },
    {
      id: "all_topics",
      icon: "üéØ",
      name: "–í—Å–µ–∑–Ω–∞—é—â–∏–π",
      desc: "–í—Å–µ —Ç–µ–º—ã –∏–∑—É—á–µ–Ω—ã",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ —Ç–µ–º—ã –≤ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–µ",
      category: "education",
    },
    {
      id: "collapsible_master",
      icon: "üìÇ",
      name: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤",
      condition: "–†–∞—Å–∫—Ä–æ–π—Ç–µ 20 –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤",
      category: "education",
    },
    {
      id: "statistics_buff",
      icon: "üìä",
      name: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
      condition: "–ò–∑—É—á–∏—Ç–µ –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
      category: "education",
    },
    {
      id: "diversification_pro",
      icon: "üé≤",
      name: "–ü—Ä–æ—Ñ–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
      condition: "–ò–∑—É—á–∏—Ç–µ —Ç–µ–º—É –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
      category: "education",
    },

    // üì¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (8 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "first_visit",
      icon: "üëã",
      name: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
      desc: "–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç",
      condition: "–í–ø–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      category: "activity",
    },
    {
      id: "home_returner",
      icon: "üè†",
      name: "–î–æ–º–æ—Å–µ–¥",
      desc: "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
      condition: "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É 10 —Ä–∞–∑",
      category: "activity",
    },
    {
      id: "explorer",
      icon: "üß≠",
      name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
      desc: "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
      category: "activity",
    },
    {
      id: "navigator",
      icon: "üó∫Ô∏è",
      name: "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä",
      desc: "–ß–∞—Å—Ç–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
      condition: "–°–æ–≤–µ—Ä—à–∏—Ç–µ 50 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏",
      category: "activity",
    },
    {
      id: "theme_switcher",
      icon: "üåì",
      name: "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
      desc: "–°–º–µ–Ω–∞ —Ç–µ–º—ã",
      condition: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ç–µ–º—É 5 —Ä–∞–∑",
      category: "activity",
    },
    {
      id: "dark_mode_fan",
      icon: "üåô",
      name: "–õ—é–±–∏—Ç–µ–ª—å —Ç–µ–º–Ω–æ—Ç—ã",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã",
      condition: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–º–Ω—É—é —Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "activity",
    },
    {
      id: "light_mode_fan",
      icon: "‚òÄÔ∏è",
      name: "–õ—é–±–∏—Ç–µ–ª—å —Å–≤–µ—Ç–∞",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã",
      condition: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "activity",
    },
    {
      id: "settings_explorer",
      icon: "‚öôÔ∏è",
      name: "–ù–∞—Å—Ç—Ä–æ–π—â–∏–∫",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      category: "activity",
    },

    // üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (6 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "doc_reader",
      icon: "üìÑ",
      name: "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥",
      desc: "–ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
      category: "documents",
    },
    {
      id: "all_docs",
      icon: "üìã",
      name: "–Æ—Ä–∏—Å—Ç",
      desc: "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
      category: "documents",
    },
    {
      id: "instruction_follower",
      icon: "üìñ",
      name: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
      desc: "–ß—Ç–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ 5 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
      category: "documents",
    },
    {
      id: "vault_explorer",
      icon: "üè¶",
      name: "–•—Ä–∞–Ω–∏—Ç–µ–ª—å",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ Vault",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ Vault",
      category: "documents",
    },
    {
      id: "safepal_user",
      icon: "üí≥",
      name: "–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ—à–µ–ª—å–∫–∞",
      desc: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SafePal",
      condition: "–ò–∑—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ SafePal",
      category: "documents",
    },
    {
      id: "faq_master",
      icon: "‚ùì",
      name: "–ó–Ω–∞—Ç–æ–∫ FAQ",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ FAQ",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ",
      category: "documents",
    },

    // üé™ –≠—Ñ–∏—Ä—ã –∏ –∞–Ω–æ–Ω—Å—ã (5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "broadcast_viewer",
      icon: "üì°",
      name: "–ó—Ä–∏—Ç–µ–ª—å —ç—Ñ–∏—Ä–æ–≤",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ–∏—Ä–∞",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–ø–∏—Å—å —ç—Ñ–∏—Ä–∞",
      category: "broadcasts",
    },
    {
      id: "live_participant",
      icon: "üî¥",
      name: "–£—á–∞—Å—Ç–Ω–∏–∫ LIVE",
      desc: "–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —ç—Ñ–∏—Ä–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏",
      category: "broadcasts",
    },
    {
      id: "announcement_reader",
      icon: "üì¢",
      name: "–í –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π",
      desc: "–ß—Ç–µ–Ω–∏–µ –∞–Ω–æ–Ω—Å–æ–≤",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–æ–Ω—Å–æ–≤",
      category: "broadcasts",
    },
    {
      id: "question_asker",
      icon: "‚úçÔ∏è",
      name: "–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π",
      desc: "–í–æ–ø—Ä–æ—Å –∫ —ç—Ñ–∏—Ä—É",
      condition: "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º—É —ç—Ñ–∏—Ä—É",
      category: "broadcasts",
    },
    {
      id: "regular_viewer",
      icon: "üé•",
      name: "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑—Ä–∏—Ç–µ–ª—å",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ–∏—Ä–æ–≤",
      condition: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 5 –∑–∞–ø–∏—Å–µ–π —ç—Ñ–∏—Ä–æ–≤",
      category: "broadcasts",
    },

    // üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (4 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
    {
      id: "support_contact",
      icon: "üí¨",
      name: "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π",
      desc: "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
      category: "support",
    },
    {
      id: "feedback_giver",
      icon: "üì¨",
      name: "–°–æ–≤–µ—Ç—á–∏–∫",
      desc: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
      condition: "–û—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
      category: "support",
    },
    {
      id: "dashboard_user",
      icon: "üìä",
      name: "–ê–Ω–∞–ª–∏—Ç–∏–∫",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞",
      category: "support",
    },
    {
      id: "share_master",
      icon: "üì§",
      name: "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å",
      desc: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
      condition: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–≤–∏–∑–∞",
      category: "support",
    },

    // üèÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ (10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "first_login_morning",
      icon: "üåÑ",
      name: "–†–∞—Å—Å–≤–µ—Ç",
      desc: "–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ —É—Ç—Ä–æ–º",
      condition: "–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ –ø–µ—Ä–∏–æ–¥ 6:00-9:00",
      category: "special",
    },
    {
      id: "weekend_enthusiast",
      icon: "üéâ",
      name: "–í—ã—Ö–æ–¥–Ω–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç",
      desc: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
      condition: "–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã 4 –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ–¥—Ä—è–¥",
      category: "special",
    },
    {
      id: "new_year",
      icon: "üéä",
      name: "–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º!",
      desc: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –≤–∏–∑–∏—Ç",
      condition: "–ó–∞–π–¥–∏—Ç–µ 1 —è–Ω–≤–∞—Ä—è",
      category: "special",
    },
    {
      id: "christmas",
      icon: "üéÑ",
      name: "–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –¥—É—Ö",
      desc: "–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤–∏–∑–∏—Ç",
      condition: "–ó–∞–π–¥–∏—Ç–µ 25 –¥–µ–∫–∞–±—Ä—è –∏–ª–∏ 7 —è–Ω–≤–∞—Ä—è",
      category: "special",
    },
    {
      id: "valentine",
      icon: "üíù",
      name: "–î–µ–Ω—å –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö",
      desc: "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –≤–∏–∑–∏—Ç",
      condition: "–ó–∞–π–¥–∏—Ç–µ 14 —Ñ–µ–≤—Ä–∞–ª—è",
      category: "special",
    },
    {
      id: "beta_tester",
      icon: "üß™",
      name: "–ë–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä",
      desc: "–†–∞–Ω–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      condition: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü",
      category: "special",
    },
    {
      id: "bug_reporter",
      icon: "üêõ",
      name: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–∞–≥–∞–º–∏",
      desc: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
      condition: "–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ",
      category: "special",
    },
    {
      id: "lucky_number",
      icon: "üçÄ",
      name: "–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫",
      desc: "–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ",
      condition: "–ù–∞–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 77% –≤ –∫–≤–∏–∑–µ",
      category: "special",
    },
    {
      id: "midnight_scholar",
      icon: "üåÉ",
      name: "–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫",
      desc: "–û–±—É—á–µ–Ω–∏–µ –Ω–æ—á—å—é",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –º–µ–∂–¥—É 00:00 –∏ 03:00",
      category: "special",
    },
    {
      id: "completionist",
      icon: "üíØ",
      name: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ–ª—å",
      desc: "–í—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
      condition: "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ 40 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
      category: "special",
    },
  ];
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = {
    quiz: { title: "üéØ –ö–≤–∏–∑—ã", badges: [] },
    streak: { title: "üî• –°–µ—Ä–∏–∏", badges: [] },
    glossary: { title: "üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π", badges: [] },
    education: { title: "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", badges: [] },
    activity: { title: "üì¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", badges: [] },
    documents: { title: "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", badges: [] },
    broadcasts: { title: "üé™ –≠—Ñ–∏—Ä—ã", badges: [] },
    support: { title: "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", badges: [] },
    special: { title: "üèÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ", badges: [] },
  };

  allBadges.forEach((badge) => {
    if (categories[badge.category]) {
      categories[badge.category].badges.push(badge);
    }
  });

  const unlockedCount = allBadges.filter((b) =>
    AppState.userData.unlockedBadges.includes(b.id)
  ).length;
  const totalCount = allBadges.length;
  const progressPercent = Math.round((unlockedCount / totalCount) * 100);

  container.innerHTML = `
    <h1>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
    <p class="caption mb-lg">–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–µ–π–¥–∂–∏, –ø—Ä–æ—Ö–æ–¥—è –∫–≤–∏–∑—ã –∏ –∏–∑—É—á–∞—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p>
    
    <div class="card mb-lg" style="text-align: center;">
      <h3>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</h3>
      <div class="progress-bar" style="margin: var(--space-md) 0;">
        <div class="progress-fill" style="width: ${progressPercent}%"></div>
      </div>
      <p class="caption"><strong>${unlockedCount}</strong> –∏–∑ <strong>${totalCount}</strong> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (${progressPercent}%)</p>
    </div>

    ${Object.entries(categories)
      .map(
        ([key, cat]) => `
      <h2 style="margin: var(--space-xl) 0 var(--space-md) 0;">${cat.title}</h2>
      <div class="badge-grid">${cat.badges
        .map((badge) => {
          const isUnlocked = AppState.userData.unlockedBadges.includes(
            badge.id
          );
          return `<div class="badge-item"><div class="badge ${
            isUnlocked ? "" : "badge-locked"
          }">${badge.icon}</div><div class="badge-name">${
            badge.name
          }</div><div class="badge-desc">${
            isUnlocked ? badge.desc : badge.condition
          }</div></div>`;
        })
        .join("")}</div>
    `
      )
      .join("")}
  `;
}

// Glossary State
const GlossaryState = {
  allTerms: [],
  filteredTerms: [],
  currentCategory: 'all',
  searchQuery: '',
  viewportHeight: 0,
  itemHeight: 200, // Approximate card height
  visibleStart: 0,
  visibleEnd: 30,
  scrollTop: 0
};

// Category detection helper
function detectCategory(term) {
  const text = (term.term + ' ' + term.definition).toLowerCase();
  
  if (text.includes('nft') || text.includes('—Ç–æ–∫–µ–Ω') && text.includes('–Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–π')) return 'nft';
  if (text.includes('defi') || text.includes('–¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω') || text.includes('–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç') || text.includes('amm')) return 'defi';
  if (text.includes('–±–ª–æ–∫—á–µ–π–Ω') || text.includes('–º–∞–π–Ω–∏–Ω–≥') || text.includes('–∫–æ–Ω—Å–µ–Ω—Å—É—Å') || text.includes('—É–∑–µ–ª')) return 'blockchain';
  if (text.includes('—Ç–æ—Ä–≥') || text.includes('–±–∏—Ä–∂–∞') || text.includes('–æ—Ä–¥–µ—Ä') || text.includes('–∞—Ä–±–∏—Ç—Ä–∞–∂')) return 'trading';
  if (text.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç') || text.includes('–∑–∞—â–∏—Ç') || text.includes('–≤–∑–ª–æ–º') || text.includes('–ø—Ä–∏–≤–∞—Ç–Ω')) return 'security';
  
  return 'general';
}

// Get category icon and label
function getCategoryInfo(category) {
  const categories = {
    all: { icon: 'üìö', label: '–í—Å–µ' },
    defi: { icon: 'üíé', label: 'DeFi' },
    nft: { icon: 'üé®', label: 'NFT' },
    blockchain: { icon: '‚õìÔ∏è', label: '–ë–ª–æ–∫—á–µ–π–Ω' },
    trading: { icon: 'üìà', label: '–¢—Ä–µ–π–¥–∏–Ω–≥' },
    security: { icon: 'üîí', label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' },
    general: { icon: 'üìñ', label: '–û–±—â–µ–µ' }
  };
  return categories[category] || categories.general;
}

async function renderGlossary(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('glossary');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const terms = window.APP_DATA.glossary || [];
  
  // Add categories to terms
  GlossaryState.allTerms = terms.map(term => ({
    ...term,
    category: term.category || detectCategory(term),
    firstLetter: (term.term || '').charAt(0).toUpperCase()
  }));
  
  GlossaryState.filteredTerms = [...GlossaryState.allTerms];
  
  const viewed = AppState.userData.progress.glossaryViewed || 0;
  const percentage = Math.round((viewed / terms.length) * 100);
  
  // Get unique categories
  const categories = ['all', ...new Set(GlossaryState.allTerms.map(t => t.category))];
  
  container.innerHTML = `
    <h1>üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π</h1>
    
    <!-- Progress Header -->
    <div class="glossary-header">
      <div class="glossary-progress-info">
        <div class="glossary-progress-label">–ò–∑—É—á–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤</div>
        <div class="glossary-progress-stats">
          <span>${viewed}</span>
          <span class="glossary-progress-total">/ ${terms.length}</span>
        </div>
      </div>
      <div class="glossary-progress-bar-container">
        <div class="glossary-progress-percentage">${percentage}%</div>
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${percentage}%"></div>
        </div>
      </div>
    </div>
    
    <!-- Search Box -->
    <div class="search-box">
      <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"/>
        <path d="M21 21l-4.35-4.35"/>
      </svg>
      <input 
        type="text" 
        class="search-input" 
        id="glossarySearch"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º..." 
        autocomplete="off"
      />
    </div>
    
    <!-- Category Filters -->
    <div class="glossary-filters" id="glossaryFilters">
      ${categories.map(cat => {
        const info = getCategoryInfo(cat);
        return `<button class="glossary-filter-btn ${cat === 'all' ? 'active' : ''}" data-category="${cat}">
          <span>${info.icon}</span>
          <span>${info.label}</span>
        </button>`;
      }).join('')}
    </div>
    
    <!-- Main Container -->
    <div class="glossary-container">
      <!-- Alphabet Navigator -->
      <div class="alphabet-nav" id="alphabetNav"></div>
      
      <!-- Virtual Scroll Container -->
      <div class="glossary-scroll-container" id="glossaryScroll">
        <div class="glossary-scroll-content" id="glossaryContent">
          <div class="glossary-viewport" id="glossaryViewport"></div>
        </div>
      </div>
    </div>
    
    <!-- Scroll to Top Button -->
    <button class="glossary-scroll-top" id="scrollTopBtn" aria-label="–ù–∞–≤–µ—Ä—Ö">
      ‚Üë
    </button>
  `;
  
  // Initialize
  initGlossary();
}

// Normalize text for better search (especially for Russian)
function normalizeSearchText(text) {
  return text
    .toLowerCase()
    .trim()
    .replace(/—ë/g, "–µ")
    .replace(/[^–∞-—èa-z0-9\s]/gi, " ") // Replace special chars with space
    .replace(/\s+/g, " "); // Normalize multiple spaces
}

// Calculate search relevance score
function calculateRelevance(term, query) {
  const normalizedQuery = normalizeSearchText(query);
  const normalizedTerm = normalizeSearchText(term.term || "");
  const normalizedDef = normalizeSearchText(term.definition || "");

  let score = 0;

  // Split query into words for multi-word search
  const queryWords = normalizedQuery.split(" ").filter((w) => w.length > 0);

  queryWords.forEach((word) => {
    // Exact match in term title - highest priority
    if (normalizedTerm === word) score += 1000;

    // Term starts with query word - high priority
    if (normalizedTerm.startsWith(word)) score += 500;

    // Term contains query word - medium priority
    if (normalizedTerm.includes(word)) score += 100;

    // Definition contains query word - lower priority
    if (normalizedDef.includes(word)) score += 10;
  });

  // Bonus for matching all query words
  const allWordsInTerm = queryWords.every((w) => normalizedTerm.includes(w));
  const allWordsInDef = queryWords.every((w) => normalizedDef.includes(w));
  if (allWordsInTerm) score += 200;
  else if (allWordsInDef) score += 20;

  return score;
}

function initGlossary() {
  // Setup event listeners
  const searchInput = document.getElementById('glossarySearch');
  const filterButtons = document.querySelectorAll('.glossary-filter-btn');
  const scrollContainer = document.getElementById('glossaryScroll');
  const scrollTopBtn = document.getElementById('scrollTopBtn');
  
  if (searchInput) {
    searchInput.addEventListener('input', debounce((e) => {
      GlossaryState.searchQuery = e.target.value;
      filterGlossary();
    }, 300));
  }
  
  if (filterButtons) {
    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        filterButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        GlossaryState.currentCategory = btn.dataset.category;
        filterGlossary();
      });
    });
  }
  
  if (scrollContainer) {
    scrollContainer.addEventListener('scroll', debounce(() => {
      updateVirtualScroll();
      
      // Show/hide scroll to top button
      if (scrollTopBtn) {
        if (scrollContainer.scrollTop > 500) {
          scrollTopBtn.classList.add('visible');
        } else {
          scrollTopBtn.classList.remove('visible');
        }
      }
    }, 50));
  }
  
  if (scrollTopBtn) {
    scrollTopBtn.addEventListener('click', () => {
      scrollContainer?.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }
  
  // Render alphabet nav
  renderAlphabetNav();
  
  // Initial render
  filterGlossary();
}

function filterGlossary() {
  let filtered = [...GlossaryState.allTerms];
  
  // Filter by category
  if (GlossaryState.currentCategory !== 'all') {
    filtered = filtered.filter(t => t.category === GlossaryState.currentCategory);
  }
  
  // Filter by search query
  if (GlossaryState.searchQuery.trim()) {
    const query = GlossaryState.searchQuery;
    filtered = filtered
      .map(term => ({ term, score: calculateRelevance(term, query) }))
      .filter(item => item.score > 0)
      .sort((a, b) => b.score - a.score)
      .map(item => item.term);
  }
  
  GlossaryState.filteredTerms = filtered;
  GlossaryState.visibleStart = 0;
  GlossaryState.visibleEnd = 30;
  
  // Update alphabet nav
  updateAlphabetNav();
  
  // Render virtual scroll
  renderVirtualScroll();
}

function renderVirtualScroll() {
  const viewport = document.getElementById('glossaryViewport');
  const content = document.getElementById('glossaryContent');
  
  if (!viewport || !content) return;
  
  const terms = GlossaryState.filteredTerms;
  
  if (terms.length === 0) {
    viewport.innerHTML = `
      <div class="glossary-empty">
        <div class="glossary-empty-icon">üîç</div>
        <p><strong>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</strong></p>
        <p class="caption">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
      </div>
    `;
    content.style.height = 'auto';
    return;
  }
  
  // Calculate total height for proper scrolling
  const totalHeight = Math.ceil(terms.length / 2) * GlossaryState.itemHeight;
  content.style.height = totalHeight + 'px';
  
  // Render visible items
  const visibleTerms = terms.slice(GlossaryState.visibleStart, GlossaryState.visibleEnd);
  
  viewport.innerHTML = `
    <div class="glossary-card-grid">
      ${visibleTerms.map(term => renderGlossaryCard(term)).join('')}
    </div>
  `;
  
  // Add click event listeners
  viewport.querySelectorAll('.glossary-card').forEach(card => {
    card.addEventListener('click', () => {
      const termId = card.dataset.termId;
      showTermDetail(termId);
    });
  });
}

function updateVirtualScroll() {
  const scrollContainer = document.getElementById('glossaryScroll');
  if (!scrollContainer) return;
  
  const scrollTop = scrollContainer.scrollTop;
  const viewportHeight = scrollContainer.clientHeight;
  
  // Calculate visible range with buffer
  const startIndex = Math.max(0, Math.floor(scrollTop / GlossaryState.itemHeight) * 2 - 10);
  const endIndex = Math.min(
    GlossaryState.filteredTerms.length,
    Math.ceil((scrollTop + viewportHeight) / GlossaryState.itemHeight) * 2 + 10
  );
  
  // Only re-render if range changed significantly
  if (Math.abs(startIndex - GlossaryState.visibleStart) > 5 || 
      Math.abs(endIndex - GlossaryState.visibleEnd) > 5) {
    GlossaryState.visibleStart = startIndex;
    GlossaryState.visibleEnd = endIndex;
    
    // Update viewport position
    const viewport = document.getElementById('glossaryViewport');
    if (viewport) {
      const offsetY = Math.floor(startIndex / 2) * GlossaryState.itemHeight;
      viewport.style.transform = `translateY(${offsetY}px)`;
    }
    
    renderVirtualScroll();
  }
}

function renderGlossaryCard(term) {
  const isViewed = AppState.userData.viewedTerms?.includes(term.id);
  const categoryInfo = getCategoryInfo(term.category);
  const definition = (term.definition || '').substring(0, 150);
  
  return `
    <div class="glossary-card" data-term-id="${term.id}" data-letter="${term.firstLetter}">
      <div class="glossary-card-header">
        <div class="glossary-card-icon">${categoryInfo.icon}</div>
        <h3 class="glossary-card-title">${term.term || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
      </div>
      
      <div class="glossary-card-category category-${term.category}">
        ${categoryInfo.label}
      </div>
      
      <p class="glossary-card-definition">
        ${definition}${definition.length >= 150 ? '...' : ''}
      </p>
      
      <div class="glossary-card-footer">
        <div class="glossary-card-meta">
          <div class="${isViewed ? 'glossary-read-indicator' : 'glossary-unread-indicator'}" title="${isViewed ? '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' : '–ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ'}"></div>
          <span>${isViewed ? '–ò–∑—É—á–µ–Ω–æ' : '–ù–æ–≤–æ–µ'}</span>
        </div>
        <span class="caption">‚Üí</span>
      </div>
    </div>
  `;
}

// Debounced version of filterGlossary for better performance
const debouncedFilterGlossary = debounce(filterGlossary, 300);

function renderAlphabetNav() {
  const nav = document.getElementById('alphabetNav');
  if (!nav) return;
  
  const alphabet = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–≠–Æ–Ø'.split('');
  const availableLetters = new Set(GlossaryState.allTerms.map(t => t.firstLetter));
  
  nav.innerHTML = alphabet.map(letter => {
    const hasTerms = availableLetters.has(letter);
    return `
      <div 
        class="alphabet-letter ${hasTerms ? '' : 'disabled'}" 
        data-letter="${letter}"
        ${hasTerms ? `onclick="scrollToLetter('${letter}')"` : ''}
      >
        ${letter}
      </div>
    `;
  }).join('');
}

function updateAlphabetNav() {
  const nav = document.getElementById('alphabetNav');
  if (!nav) return;
  
  const availableLetters = new Set(GlossaryState.filteredTerms.map(t => t.firstLetter));
  
  nav.querySelectorAll('.alphabet-letter').forEach(elem => {
    const letter = elem.dataset.letter;
    if (availableLetters.has(letter)) {
      elem.classList.remove('disabled');
      elem.onclick = () => scrollToLetter(letter);
    } else {
      elem.classList.add('disabled');
      elem.onclick = null;
    }
  });
}

function scrollToLetter(letter) {
  hapticFeedback('light');
  
  const index = GlossaryState.filteredTerms.findIndex(t => t.firstLetter === letter);
  if (index === -1) return;
  
  const scrollContainer = document.getElementById('glossaryScroll');
  if (!scrollContainer) return;
  
  const targetScroll = Math.floor(index / 2) * GlossaryState.itemHeight;
  scrollContainer.scrollTo({ top: targetScroll, behavior: 'smooth' });
  
  // Highlight the letter
  document.querySelectorAll('.alphabet-letter').forEach(el => el.classList.remove('active'));
  document.querySelector(`[data-letter="${letter}"]`)?.classList.add('active');
  
  setTimeout(() => {
    document.querySelector(`[data-letter="${letter}"]`)?.classList.remove('active');
  }, 1000);
}

function showTermDetail(termId) {
  hapticFeedback('light');
  
  const term = GlossaryState.allTerms.find(t => t.id === termId);
  if (!term) return;
  
  // Update progress
  if (!AppState.userData.progress.glossaryViewed) {
    AppState.userData.progress.glossaryViewed = 0;
  }
  if (!AppState.userData.viewedTerms) {
    AppState.userData.viewedTerms = [];
  }
  
  const isNewTerm = !AppState.userData.viewedTerms.includes(termId);
  if (isNewTerm) {
    AppState.userData.viewedTerms.push(termId);
    AppState.userData.progress.glossaryViewed++;
    saveUserData();
  }
  
  const categoryInfo = getCategoryInfo(term.category);
  
  // Create modal
  const modal = document.createElement('div');
  modal.className = 'glossary-modal';
  modal.innerHTML = `
    <div class="glossary-modal-content">
      <div class="glossary-modal-header">
        <div class="glossary-modal-icon">${categoryInfo.icon}</div>
        <div class="glossary-modal-title-wrapper">
          <h2 class="glossary-modal-title">${term.term}</h2>
          <div class="glossary-card-category category-${term.category}">
            ${categoryInfo.label}
          </div>
        </div>
        <button class="glossary-modal-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M18 6L6 18M6 6l12 12"/>
          </svg>
        </button>
      </div>
      
      <div class="glossary-modal-body">
        <div class="glossary-modal-definition">${term.definition || '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</div>
      </div>
      
      <div class="glossary-modal-footer">
        ${term.videoUrl ? `
          <button class="btn btn-primary" data-action="openVideo" data-url="${term.videoUrl}">
            ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ
          </button>
        ` : ''}
        <button class="btn btn-secondary" onclick="this.closest('.glossary-modal').remove()">
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
      </div>
    </div>
  `;
  
  // Close on backdrop click
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
  
  // Close button
  modal.querySelector('.glossary-modal-close')?.addEventListener('click', () => {
    modal.remove();
  });
  
  // Close on Escape
  const handleEscape = (e) => {
    if (e.key === 'Escape') {
      modal.remove();
      document.removeEventListener('keydown', handleEscape);
    }
  };
  document.addEventListener('keydown', handleEscape);
  
  document.body.appendChild(modal);
  
  // Update the card in the list if visible
  if (isNewTerm) {
    setTimeout(() => {
      const card = document.querySelector(`[data-term-id="${termId}"]`);
      if (card) {
        const indicator = card.querySelector('.glossary-unread-indicator');
        if (indicator) {
          indicator.className = 'glossary-read-indicator';
          card.querySelector('.glossary-card-meta span').textContent = '–ò–∑—É—á–µ–Ω–æ';
        }
      }
    }, 300);
  }
}

function renderSimulator(container) {
  container.innerHTML = `<h1>–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è</h1><p class="caption mb-lg">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</p><div class="card"><p style="color: var(--color-premium); font-weight: 600;">üöÄ –°–∫–æ—Ä–æ!</p><p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤.</p><div style="margin-top: var(--space-lg);"><h4>–ß—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:</h4><ul style="margin-top: var(--space-sm);"><li>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤</li><li>–°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</li><li>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤</li><li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</li></ul></div></div>`;
}

function renderHelp(container) {
  container.innerHTML = `<h1>–ü–æ–º–æ—â—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h1><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p><p>2. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–∏–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π</p><p>3. –ò–∑—É—á–∞–π—Ç–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ –≤–∏–¥–µ–æ</p><p>4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p></div></div></div><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ü—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p><p style="margin-top: var(--space-md); font-weight: 600; color: var(--color-error);">–í–∞–∂–Ω–æ: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–æ—Å—è—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.</p></div></div></div><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É MC Recovery Fund</p></div></div></div>`;
}

function renderProfile(container) {
  const userData = AppState.userData;
  container.innerHTML = `<h1>–ü—Ä–æ—Ñ–∏–ª—å</h1><div class="card mb-lg"><h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3><p>–°–µ—Ä–∏—è: <strong>${
    userData.streak
  } ${getDaysWord(userData.streak)}</strong></p><p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–≤–∏–∑–æ–≤: <strong>${
    userData.completedQuizzes.length
  }</strong></p><p>–ë–µ–π–¥–∂–µ–π: <strong>${
    userData.unlockedBadges.length
  }</strong></p></div><div class="card mb-lg"><h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3><button class="btn btn-ghost" data-action="resetProgress" style="width: 100%; margin-top: var(--space-md); color: var(--color-error);">–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</button></div>`;
}

function resetProgress() {
  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.")) {
    hapticFeedback("heavy");
    localStorage.removeItem("mc_recovery_user_data");
    AppState.userData = {
      streak: 0,
      lastActiveDate: null,
      completedQuizzes: [],
      unlockedBadges: [],
      progress: { quizzes: 0, eduTopics: 0, glossaryViewed: 0 },
      settings: { theme: "auto", language: "ru" },
    };
    navigate("home");
  }
}

// Theme Management
function toggleTheme() {
  const root = document.documentElement;
  const current = root.getAttribute("data-theme") || "light";
  const next = current === "light" ? "dark" : "light";

  root.setAttribute("data-theme", next);
  localStorage.setItem("theme", next);
  // –í–∞–∂–Ω–æ: —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
  root.style.removeProperty("--color-text");
  root.style.removeProperty("--color-bg");

  // Update icons
  const sunIcon = document.querySelector(".theme-icon-sun");
  const moonIcon = document.querySelector(".theme-icon-moon");

  if (next === "dark") {
    if (sunIcon) sunIcon.style.display = "none";
    if (moonIcon) moonIcon.style.display = "block";
  } else {
    if (sunIcon) sunIcon.style.display = "block";
    if (moonIcon) moonIcon.style.display = "none";
  }

  // Update Telegram theme if available
  if (tg && tg.themeParams) {
    if (next === "dark") {
      document
        .querySelector('meta[name="theme-color"]')
        ?.setAttribute("content", "#0a0f1a");
    } else {
      document
        .querySelector('meta[name="theme-color"]')
        ?.setAttribute("content", "#1326FD");
    }
  }

  hapticFeedback("light");
}

function initThemeIcons() {
  const theme = document.documentElement.getAttribute("data-theme") || "light";
  const sunIcon = document.querySelector(".theme-icon-sun");
  const moonIcon = document.querySelector(".theme-icon-moon");

  if (theme === "dark") {
    if (sunIcon) sunIcon.style.display = "none";
    if (moonIcon) moonIcon.style.display = "block";
  } else {
    if (sunIcon) sunIcon.style.display = "block";
    if (moonIcon) moonIcon.style.display = "none";
  }
}

// ==========================================
// Part 2: New sections rendering
// ==========================================

async function renderInstructions(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('instructions');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const data = window.APP_DATA.instructions;
  if (!data || !data.groups) {
    container.innerHTML = `<div class="card"><p>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>`;
    return;
  }

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    <div class="card-grid">
      ${data.groups
        .map(
          (group) => `
        <div class="collapsible">
          <div class="collapsible-header" data-action="toggleCollapsible">
            <span><span style="font-size: 24px; margin-right: var(--space-sm);">${
              group.icon
            }</span><strong>${group.title}</strong></span>
            <svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M6 9l6 6 6-6"/>
            </svg>
          </div>
          <div class="collapsible-content">
            <div class="collapsible-body">
              <p class="caption mb-md">${group.description}</p>
              <div class="list">
                ${group.items
                  .map((item) => {
                    const isPlaceholder = item.url.includes("<ADD_LINK>");
                    return `
                    <div class="list-item ${
                      isPlaceholder ? "opacity-50" : ""
                    }" ${
                      !isPlaceholder
                        ? `data-action="openLink" data-url="${item.url}"`
                        : ""
                    }>
                      <div style="flex: 1;">
                        <strong>${item.title}</strong>
                        <p class="caption" style="margin: var(--space-xs) 0 0 0;">${
                          item.description
                        }</p>
                        ${
                          item.videos
                            ? `
                          <div style="margin-top: var(--space-sm); display: flex; gap: var(--space-sm); flex-wrap: wrap;">
                            ${item.videos
                              .map(
                                (video) => `
                              <button class="btn btn-ghost" data-action="openLink" data-url="${video.url}" style="padding: var(--space-xs) var(--space-sm); font-size: var(--font-size-small);">
                                ‚ñ∂Ô∏è ${video.title}
                              </button>
                            `
                              )
                              .join("")}
                          </div>
                        `
                            : ""
                        }
                      </div>
                      ${
                        isPlaceholder
                          ? '<span class="caption" style="color: var(--text-muted);">–°–∫–æ—Ä–æ</span>'
                          : '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"/><path d="M21 21l-4.35-4.35"/></svg>'
                      }
                    </div>
                  `;
                  })
                  .join("")}
              </div>
            </div>
          </div>
        </div>
      `
        )
        .join("")}
    </div>
  `;
}

async function renderAnnouncements(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('announcements');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const announcements = window.APP_DATA.announcements || [];

  if (announcements.length === 0) {
    container.innerHTML = `
      <h1>–ê–Ω–æ–Ω—Å—ã</h1>
      <div class="card" style="text-align: center; padding: var(--space-xl);">
        <div style="font-size: 48px; margin-bottom: var(--space-md);">üì¢</div>
        <h3>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤</h3>
        <p class="caption">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏</p>
      </div>
    `;
    return;
  }

  container.innerHTML = `
    <h1>–ê–Ω–æ–Ω—Å—ã</h1>
    <p class="caption mb-lg">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</p>
    <div class="card-grid">
      ${announcements
        .map((announcement) => {
          const date = announcement.date
            ? new Date(announcement.date)
            : new Date();
          const dateStr = date.toLocaleDateString("ru-RU", {
            day: "numeric",
            month: "long",
            year: "numeric",
          });
          const isPast = date < new Date();

          return `
          <div class="card ${isPast ? "opacity-50" : ""}">
            <div style="display: flex; align-items: start; gap: var(--space-md); margin-bottom: var(--space-md);">
              <div style="font-size: 40px; line-height: 1;">${
                announcement.icon || "üì¢"
              }</div>
              <div style="flex: 1;">
                <div class="caption" style="color: var(--color-primary); font-weight: 600; margin-bottom: var(--space-xs);">
                  ${dateStr}, ${announcement.time || "‚Äî"} ${
            announcement.timezone || "–ú–°–ö"
          }
                </div>
                <h3 style="margin-bottom: var(--space-sm);">${
                  announcement.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                }</h3>
              </div>
            </div>
            <p>${announcement.description || ""}</p>
            ${
              announcement.formUrl
                ? `
              <button class="btn btn-primary" data-action="openLink" data-url="${announcement.formUrl}" style="width: 100%; margin-top: var(--space-md);">
                üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞—Ä–∞–Ω–µ–µ
              </button>
            `
                : ""
            }
            ${
              isPast
                ? '<p class="caption" style="margin-top: var(--space-md); color: var(--text-muted);">–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>'
                : ""
            }
          </div>
        `;
        })
        .join("")}
    </div>
  `;
}

async function renderBroadcasts(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('broadcasts');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const data = window.APP_DATA.broadcasts;
  if (!data || !data.schedule) {
    container.innerHTML = `<div class="card"><p>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>`;
    return;
  }

  const upcoming = data.schedule.filter((b) => b.status === "upcoming");
  const completed = data.schedule.filter((b) => b.status === "completed");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card mb-lg" style="background: linear-gradient(135deg, var(--color-primary-light) 0%, var(--surface-1) 100%); border: 2px solid var(--color-primary);">
      <p style="line-height: var(--line-height-relaxed);">${data.intro}</p>
    </div>
    
    ${
      upcoming.length > 0
        ? `
      <h2 style="margin-bottom: var(--space-md);">üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —ç—Ñ–∏—Ä—ã</h2>
      <div class="card-grid mb-lg">
        ${upcoming
          .map((broadcast) => {
            const date = broadcast.date ? new Date(broadcast.date) : new Date();
            const dateStr = date.toLocaleDateString("ru-RU", {
              day: "numeric",
              month: "long",
            });

            return `
            <div class="card" style="border: 2px solid var(--color-primary);">
              <div class="preview-label" style="color: var(--color-primary);">
                ${broadcast.day || "–î–∞—Ç–∞"}, ${dateStr} ‚Ä¢ ${
              broadcast.time || "‚Äî"
            } ${broadcast.timezone || "–ú–°–ö"}
              </div>
              <h3>${broadcast.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</h3>
              <p class="caption" style="margin-bottom: ${
                broadcast.recordUrl ? "var(--space-md)" : "0"
              };">${broadcast.description || ""}</p>
              ${
                broadcast.recordUrl
                  ? `<button class="btn btn-primary" data-action="openLink" data-url="${broadcast.recordUrl}" style="width: 100%; margin-top: var(--space-sm);">‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å</button>`
                  : ""
              }
            </div>
          `;
          })
          .join("")}
      </div>
    `
        : ""
    }
    
    <h2 style="margin-bottom: var(--space-md);">üé¨ –ü—Ä–æ—à–µ–¥—à–∏–µ —ç—Ñ–∏—Ä—ã</h2>
    <div class="list">
      ${completed
        .map((broadcast) => {
          const date = broadcast.date ? new Date(broadcast.date) : new Date();
          const dateStr = date.toLocaleDateString("ru-RU", {
            day: "numeric",
            month: "long",
          });

          return `
          <div class="list-item">
            <div style="flex: 1;">
              <div class="caption" style="margin-bottom: var(--space-xs);">
                ${broadcast.day || "–î–∞—Ç–∞"}, ${dateStr} ‚Ä¢ ${
            broadcast.time || "‚Äî"
          } ${broadcast.timezone || "–ú–°–ö"}
              </div>
              <strong>${broadcast.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</strong>
              <p class="caption" style="margin: var(--space-xs) 0 0 0;">${
                broadcast.description || ""
              }</p>
            </div>
            ${
              broadcast.recordUrl
                ? `<button class="btn btn-ghost" data-action="openLink" data-url="${broadcast.recordUrl}" style="white-space: nowrap;">‚ñ∂Ô∏è –ó–∞–ø–∏—Å—å</button>`
                : '<span class="caption" style="color: var(--text-muted);">–°–∫–æ—Ä–æ</span>'
            }
          </div>
        `;
        })
        .join("")}
    </div>
  `;
}

function renderDashboard(container) {
  const data = window.APP_DATA.dashboard;
  if (!data || !data.title) {
    container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
    return;
  }

  const isPlaceholder = data.url.includes("<ADD_");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card">
      <div style="text-align: center; padding: var(--space-xl) 0;">
        <div style="font-size: 64px; margin-bottom: var(--space-lg);">üìä</div>
        <h2 style="margin-bottom: var(--space-md);">${data.title}</h2>
        <p class="caption mb-lg">–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏</p>
        
        <div style="text-align: left; margin: var(--space-xl) 0;">
          <h4 style="margin-bottom: var(--space-md);">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
          <ul style="list-style: none; padding: 0;">
            ${data.features
              .map(
                (feature) => `
              <li style="padding: var(--space-sm) 0; display: flex; align-items: start; gap: var(--space-sm);">
                <span style="color: var(--color-success); font-size: 20px;">‚úì</span>
                <span>${feature}</span>
              </li>
            `
              )
              .join("")}
          </ul>
        </div>
        
        ${
          isPlaceholder
            ? `
          <div style="margin-top: var(--space-xl); padding: var(--space-lg); background: var(--surface-2); border-radius: var(--radius-md);">
            <p style="color: var(--color-premium); font-weight: 600; margin-bottom: var(--space-sm);">üöÄ –°–∫–æ—Ä–æ!</p>
            <p class="caption">–î–∞—à–±–æ—Ä–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.</p>
          </div>
        `
            : `
          <button class="btn btn-primary" data-action="openLink" data-url="${data.url}" style="margin-top: var(--space-lg);">
            –û—Ç–∫—Ä—ã—Ç—å –î–∞—à–±–æ—Ä–¥
          </button>
        `
        }
      </div>
    </div>
  `;
}

async function renderSupport(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('support');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const data = window.APP_DATA.support;
  if (!data || !data.channels) {
    container.innerHTML = `<div class="card"><p>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>`;
    return;
  }

  const isPlaceholder = data.botUrl.includes("<ADD_");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card-grid">
      ${data.channels
        .map(
          (channel) => `
        <div class="card card-interactive" ${
          !isPlaceholder
            ? `data-action="openLink" data-url="${channel.url}"`
            : ""
        }>
          <div style="text-align: center;">
            <div style="font-size: 48px; margin-bottom: var(--space-md);">üí¨</div>
            <h3>${channel.title}</h3>
            <p class="caption">${channel.description}</p>
            ${
              isPlaceholder
                ? `
              <div style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--surface-2); border-radius: var(--radius-md);">
                <p class="caption" style="color: var(--text-muted);">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω</p>
              </div>
            `
                : `
              <button class="btn btn-primary" style="width: 100%; margin-top: var(--space-lg);">
                –°–≤—è–∑–∞—Ç—å—Å—è
              </button>
            `
            }
          </div>
        </div>
      `
        )
        .join("")}
    </div>
    
    <div class="card mt-lg" style="background: var(--surface-2);">
      <h3>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h3>
      <p class="caption">${
        data.workingHours?.weekdays ||
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 10:00 - 19:00 –ú–°–ö"
      }</p>
      <p class="caption">${
        data.workingHours?.weekend || "–°—É–±–±–æ—Ç–∞ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –í—ã—Ö–æ–¥–Ω–æ–π"
      }</p>
      <p class="caption" style="margin-top: var(--space-md);">${
        data.workingHours?.responseTime || "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 2 —á–∞—Å–æ–≤"
      }</p>
    </div>
  `;
}

async function renderDocuments(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('documents');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const documents = window.APP_DATA.documents || [];

  container.innerHTML = `
    <h1>–î–æ–∫—É–º–µ–Ω—Ç—ã</h1>
    <p class="caption mb-lg">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p>
    
    <div class="card-grid">
      ${documents
        .map(
          (doc) => `
        <div class="card card-interactive" data-action="openLink" data-url="${
          doc.url || "#"
        }">
          <div style="display: flex; align-items: start; gap: var(--space-md);">
            <div style="font-size: 40px; line-height: 1;">${
              doc.icon || "üìÑ"
            }</div>
            <div style="flex: 1;">
              <h3 style="margin-bottom: var(--space-sm);">${
                doc.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
              }</h3>
              <p class="caption">${doc.description || ""}</p>
              <div style="margin-top: var(--space-md);">
                <span class="caption" style="color: var(--color-primary); font-weight: 600;">
                  ${(doc.type || "PDF").toUpperCase()} –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí
                </span>
              </div>
            </div>
          </div>
        </div>
      `
        )
        .join("")}
    </div>
    
    <div class="card mt-lg" style="border: 2px solid var(--border-strong); background: var(--surface-2);">
      <p class="caption" style="line-height: var(--line-height-relaxed);">
        <strong>–í–∞–∂–Ω–æ:</strong> –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö. 
        –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.
      </p>
    </div>
  `;
}

async function renderFAQ(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('faq');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const data = window.APP_DATA.faq;
  if (!data || !data.categories) {
    container.innerHTML = `<div class="card"><p>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>`;
    return;
  }

  // Build FAQ items map for quick lookup
  const faqMap = new Map();
  data.categories.forEach(category => {
    category.items.forEach(item => {
      faqMap.set(item.id, { ...item, categoryId: category.id, categoryTitle: category.title });
    });
  });

  // Render quick links
  const quickLinksHTML = data.quickLinks && data.quickLinks.length > 0
    ? `
      <div class="faq-quick-links" role="navigation" aria-label="–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã">
        <h2 class="section-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã</h2>
        <div class="quick-links-grid">
          ${data.quickLinks.map(link => `
            <button 
              class="quick-link-card" 
              data-action="scrollToFAQ" 
              data-faq-id="${link.questionIds[0]}"
              aria-label="${link.title}">
              <span class="quick-link-icon" aria-hidden="true">${link.icon}</span>
              <span class="quick-link-title">${link.title}</span>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                <path d="M9 18l6-6-6-6"/>
              </svg>
            </button>
          `).join('')}
        </div>
      </div>
    `
    : '';

  // Render categories with accordion items
  const categoriesHTML = data.categories.map(category => {
    const itemsHTML = category.items.map((item, index) => {
      const hasLink = item.link && item.link.url;
      const relatedQuestionsHTML = item.relatedIds && item.relatedIds.length > 0
        ? `
          <div class="faq-related">
            <p class="faq-related-title"><strong>–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ:</strong></p>
            <ul class="faq-related-list" role="list">
              ${item.relatedIds.map(relatedId => {
                const related = faqMap.get(relatedId);
                return related 
                  ? `<li><button class="faq-related-link" data-action="scrollToFAQ" data-faq-id="${relatedId}" aria-label="–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É: ${related.question}">${related.question}</button></li>`
                  : '';
              }).join('')}
            </ul>
          </div>
        `
        : '';

      return `
        <div class="faq-item" id="${item.id}" data-faq-id="${item.id}">
          <h3 class="faq-question">
            <button 
              class="faq-toggle" 
              aria-expanded="false" 
              aria-controls="faq-answer-${item.id}"
              id="faq-btn-${item.id}">
              <span class="faq-toggle-icon" aria-hidden="true">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M9 18l6-6-6-6"/>
                </svg>
              </span>
              <span class="faq-question-text">${item.question}</span>
            </button>
          </h3>
          <div 
            class="faq-answer" 
            id="faq-answer-${item.id}" 
            role="region"
            aria-labelledby="faq-btn-${item.id}"
            hidden>
            <div class="faq-answer-content">
              <p style="white-space: pre-line; line-height: 1.6;">${item.answer}</p>
              ${hasLink ? `
                <a 
                  href="${item.link.url}" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  class="btn btn-primary btn-sm" 
                  style="margin-top: var(--space-md); display: inline-flex; align-items: center; gap: var(--space-xs);">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                    <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6M15 3h6v6M10 14L21 3"/>
                  </svg>
                  ${item.link.text}
                  <span class="visually-hidden"> (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ)</span>
                </a>
              ` : ''}
              ${relatedQuestionsHTML}
            </div>
          </div>
        </div>
      `;
    }).join('');

    return `
      <section class="faq-category" role="region" aria-labelledby="category-${category.id}">
        <h2 class="faq-category-title" id="category-${category.id}">
          <span aria-hidden="true">${category.icon}</span> ${category.title}
        </h2>
        <div class="faq-items" role="list">
          ${itemsHTML}
        </div>
      </section>
    `;
  }).join('');

  container.innerHTML = `
    <div class="faq-container">
      <header class="faq-header">
        <h1>${data.icon} ${data.title}</h1>
        <p class="caption">${data.description}</p>
      </header>

      <!-- Search Bar -->
      <div class="faq-search" role="search">
        <label for="faq-search-input" class="visually-hidden">–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º</label>
        <div class="search-input-wrapper">
          <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
            <circle cx="11" cy="11" r="8"/>
            <path d="m21 21-4.35-4.35"/>
          </svg>
          <input 
            type="search" 
            id="faq-search-input" 
            class="faq-search-input" 
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º..."
            aria-label="–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º"
            autocomplete="off">
          <button 
            class="search-clear" 
            id="faq-search-clear" 
            aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫" 
            hidden>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 6L6 18M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <p id="faq-search-results" class="faq-search-results" role="status" aria-live="polite"></p>
      </div>

      ${quickLinksHTML}

      <!-- FAQ Categories -->
      <div class="faq-categories">
        ${categoriesHTML}
      </div>

      <!-- Support Card -->
      <div class="card" style="margin-top: var(--space-xl);">
        <h3>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç?</h3>
        <p class="caption mb-md">–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è</p>
        <button class="btn btn-secondary" data-action="navigate" data-route="support" style="width: 100%;">
          üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        </button>
      </div>
    </div>
  `;

  // Initialize FAQ interactions
  initFAQInteractions(faqMap);
}

function initFAQInteractions(faqMap) {
  // Accordion toggle functionality
  document.querySelectorAll('.faq-toggle').forEach(button => {
    button.addEventListener('click', (e) => {
      hapticFeedback('light');
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      const answerId = button.getAttribute('aria-controls');
      const answer = document.getElementById(answerId);
      
      // Close all other open accordions for cleaner UX (optional)
      // Comment out if you want multiple items open at once
      document.querySelectorAll('.faq-toggle[aria-expanded="true"]').forEach(otherBtn => {
        if (otherBtn !== button) {
          const otherAnswerId = otherBtn.getAttribute('aria-controls');
          const otherAnswer = document.getElementById(otherAnswerId);
          otherBtn.setAttribute('aria-expanded', 'false');
          otherAnswer.hidden = true;
          otherBtn.closest('.faq-item').classList.remove('faq-item-open');
        }
      });

      // Toggle current accordion
      button.setAttribute('aria-expanded', !isExpanded);
      answer.hidden = isExpanded;
      button.closest('.faq-item').classList.toggle('faq-item-open', !isExpanded);

      // Smooth scroll to question if opening
      if (!isExpanded) {
        setTimeout(() => {
          button.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }, 100);
      }
    });

    // Keyboard navigation
    button.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        button.click();
      }
    });
  });

  // Search functionality
  const searchInput = document.getElementById('faq-search-input');
  const searchClear = document.getElementById('faq-search-clear');
  const searchResults = document.getElementById('faq-search-results');
  
  let searchTimeout;
  
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim().toLowerCase();
    
    // Show/hide clear button
    searchClear.hidden = query.length === 0;
    
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      filterFAQItems(query, searchResults, faqMap);
    }, 300); // Debounce search
  });

  searchClear.addEventListener('click', () => {
    searchInput.value = '';
    searchClear.hidden = true;
    filterFAQItems('', searchResults, faqMap);
    searchInput.focus();
  });

  // Quick links and related questions navigation
  document.querySelectorAll('[data-action="scrollToFAQ"]').forEach(button => {
    button.addEventListener('click', (e) => {
      hapticFeedback('light');
      const faqId = button.getAttribute('data-faq-id');
      const faqItem = document.getElementById(faqId);
      const faqToggle = document.getElementById(`faq-btn-${faqId}`);
      
      if (faqItem && faqToggle) {
        // Open the accordion
        faqToggle.setAttribute('aria-expanded', 'true');
        const answerId = faqToggle.getAttribute('aria-controls');
        const answer = document.getElementById(answerId);
        answer.hidden = false;
        faqItem.classList.add('faq-item-open');
        
        // Scroll to item with highlight
        faqItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
        faqItem.classList.add('faq-item-highlight');
        setTimeout(() => {
          faqItem.classList.remove('faq-item-highlight');
        }, 2000);
      }
    });
  });
}

function filterFAQItems(query, resultsElement, faqMap) {
  const items = document.querySelectorAll('.faq-item');
  const categories = document.querySelectorAll('.faq-category');
  
  if (!query) {
    // Show all items
    items.forEach(item => item.style.display = '');
    categories.forEach(cat => cat.style.display = '');
    resultsElement.textContent = '';
    return;
  }

  let matchCount = 0;
  
  items.forEach(item => {
    const faqId = item.getAttribute('data-faq-id');
    const faqData = faqMap.get(faqId);
    
    if (faqData) {
      const questionMatch = faqData.question.toLowerCase().includes(query);
      const answerMatch = faqData.answer.toLowerCase().includes(query);
      const tagsMatch = faqData.tags && faqData.tags.some(tag => tag.toLowerCase().includes(query));
      
      const isMatch = questionMatch || answerMatch || tagsMatch;
      
      if (isMatch) {
        item.style.display = '';
        matchCount++;
      } else {
        item.style.display = 'none';
      }
    }
  });

  // Hide empty categories
  categories.forEach(category => {
    const visibleItems = category.querySelectorAll('.faq-item:not([style*="display: none"])');
    category.style.display = visibleItems.length > 0 ? '' : 'none';
  });

  // Update results message
  if (matchCount === 0) {
    resultsElement.textContent = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
  } else {
    resultsElement.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${matchCount} ${getDeclension(matchCount, ['–≤–æ–ø—Ä–æ—Å', '–≤–æ–ø—Ä–æ—Å–∞', '–≤–æ–ø—Ä–æ—Å–æ–≤'])}`;
  }
}

function getDeclension(number, titles) {
  const cases = [2, 0, 1, 1, 1, 2];
  return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];
}

async function renderLiterature(container) {
  // Show loading state immediately
  container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
  
  // Ensure data is loaded
  const loaded = await ensureDataLoaded('literature');
  if (!loaded) {
    container.innerHTML = `<div class="card"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>`;
    return;
  }
  
  const data = window.APP_DATA.literature;
  if (!data || !data.categories) {
    container.innerHTML = `<div class="card"><p>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p></div>`;
    return;
  }

  const categoriesHTML = data.categories
    .map((category) => {
      const booksHTML = category.books
        .map((book) => {
          const linkButton = book.url
            ? `<button class="btn btn-primary" data-action="openLink" data-url="${book.url}" style="margin-top: var(--space-md); width: 100%;">
               üõí –ö—É–ø–∏—Ç—å –Ω–∞ Litres
             </button>`
            : "";

          // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥
          const coverImage = book.cover
            ? `
              <div style="float: left; margin-right: var(--space-md); margin-bottom: var(--space-sm); width: 120px; flex-shrink: 0;">
                <img src="${book.cover}" 
                     alt="${book.title}" 
                     loading="lazy"
                     style="width: 100%; height: auto; border-radius: var(--radius-md); box-shadow: 0 4px 12px rgba(0,0,0,0.15);" />
              </div>
            `
            : "";

          return `
          <div class="card" style="margin-bottom: var(--space-md); overflow: hidden;">
            ${coverImage}
            <div style="min-height: ${book.cover ? '140px' : 'auto'};">
              <h3 style="margin-bottom: var(--space-xs); color: var(--color-primary);">${
                book.title
              }</h3>
              <p class="caption" style="margin-bottom: var(--space-xs);"><strong>‚úçÔ∏è –ê–≤—Ç–æ—Ä:</strong> ${
                book.author
              }</p>
              ${
                book.year
                  ? `<p class="caption" style="margin-bottom: var(--space-sm); opacity: 0.7;">üìÖ –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: ${book.year}</p>`
                  : ""
              }
              <p style="margin-bottom: var(--space-sm); line-height: var(--line-height-relaxed); color: var(--text-secondary);">${
                book.description
              }</p>
            </div>
            <div style="clear: both;"></div>
            ${linkButton}
          </div>
        `;
        })
        .join("");

      return `
        <section class="content-section">
          <h2 class="section-title">${category.icon} ${category.name}</h2>
          ${booksHTML}
        </section>
      `;
    })
    .join("");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    ${categoriesHTML}
    
    <div class="card mt-lg" style="border: 2px solid var(--border-strong); background: var(--surface-2);">
      <p class="caption" style="line-height: var(--line-height-relaxed);">
        <strong>–°–æ–≤–µ—Ç:</strong> –ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–û—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", –µ—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫. 
        –ö–Ω–∏–≥–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. 
      </p>
    </div>
  `;
}

function openLink(url) {
  hapticFeedback("light");
  if (url.includes("<ADD_")) {
    alert("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞");
    return;
  }
  if (tg) {
    tg.openLink(url);
  } else {
    window.open(url, "_blank");
  }
}

// Utility: Debounce
function debounce(fn, delay) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => fn.apply(this, args), delay);
  };
}

// Utility: Lazy Load Images with Intersection Observer
function initLazyLoading() {
  const lazyImages = document.querySelectorAll(
    'img[data-src], img[loading="lazy"]'
  );

  if ("IntersectionObserver" in window) {
    const imageObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const img = entry.target;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute("data-src");
            }
            img.classList.add("loaded");
            imageObserver.unobserve(img);
          }
        });
      },
      {
        rootMargin: "50px 0px",
        threshold: 0.01,
      }
    );

    lazyImages.forEach((img) => imageObserver.observe(img));
  } else {
    // Fallback for browsers without Intersection Observer
    lazyImages.forEach((img) => {
      if (img.dataset.src) {
        img.src = img.dataset.src;
        img.removeAttribute("data-src");
      }
    });
  }
}

// Global error handler
window.addEventListener("error", (e) => {
  console.error("Global error:", e.error);
  // Could show toast notification here
});

window.addEventListener("unhandledrejection", (e) => {
  console.error("Unhandled promise rejection:", e.reason);
});

// Global Event Delegation Handler
document.addEventListener("click", (e) => {
  const target = e.target.closest("[data-action]");
  if (!target) return;

  const action = target.dataset.action;

  switch (action) {
    case "switchTab":
      const tabName =
        target.dataset.tab || target.closest(".tab-item")?.dataset.tab;
      if (tabName) switchTab(tabName);
      break;
    case "navigate":
      const route = target.dataset.route;
      const quizId = target.dataset.quizId;
      navigate(route, quizId ? { id: quizId } : {});
      break;
    case "startQuiz":
      startQuiz(target.dataset.quizId);
      break;
    case "selectAnswer":
      selectAnswer(parseInt(target.dataset.index));
      break;
    case "showHint":
      showHint();
      break;
    case "skipQuestion":
      skipQuestion();
      break;
    case "downloadResult":
      downloadResult();
      break;
    case "shareResult":
      shareResult();
      break;
    case "toggleCollapsible":
      toggleCollapsible(target);
      break;
    case "openVideo":
      openVideo(target.dataset.url);
      break;
    case "openLink":
      openLink(target.dataset.url);
      break;
    case "showTermDetail":
      showTermDetail(target.dataset.termId);
      break;
    case "closeModal":
      target.closest('div[style*="fixed"]')?.remove();
      break;
    case "resetProgress":
      resetProgress();
      break;
    case "refreshVault":
      refreshVault();
      break;
    case "resetDashboardFilters":
      resetDashboardFilters();
      break;
  }
});

// Global Change Event Handler for filters
document.addEventListener("change", (e) => {
  const target = e.target;
  if (target.dataset.filter) {
    filterDashboard(target);
  }
});

async function refreshVault() {
  hapticFeedback("light");
  try {
    await loadVaultData();
    // Re-render home page if we're on it
    if (AppState.currentRoute === "home") {
      const container = document.getElementById("content");
      renderHome(container);
    }
  } catch (error) {
    console.error("Failed to refresh vault data:", error);
  }
}

// Initialize app
document.addEventListener("DOMContentLoaded", () => {
  // Synchronous initialization first
  loadUserData();
  initThemeIcons();

  // Setup event handlers
  const themeToggle = document.getElementById("themeToggle");
  if (themeToggle) {
    themeToggle.onclick = toggleTheme;
  }
  
  document.getElementById("backBtn").onclick = handleBackButton;

  // Initialize Tab Bar immediately
  renderTabBar();

  // Restore last active tab or use default
  const lastTab = localStorage.getItem("lastActiveTab") || "home";
  const hash = window.location.hash.substring(1);
  const tabRoutes = ["home", "learn", "data", "progress", "more"];
  const initialTab = tabRoutes.includes(hash) ? hash : lastTab;
  AppState.activeTab = initialTab;

  // Event-driven approach: wait for critical data, then render
  if (window.APP_DATA_READY) {
    initializeApp(hash, initialTab, tabRoutes);
  } else {
    document.addEventListener('app-data-ready', () => {
      initializeApp(hash, initialTab, tabRoutes);
    }, { once: true });
  }

  // Initialize lazy loading for images
  initLazyLoading();

  // Re-initialize lazy loading after each navigation
  const originalNavigate = navigate;
  window.navigate = function (...args) {
    originalNavigate.apply(this, args);
    setTimeout(() => initLazyLoading(), 100);
  };

  // Register Service Worker for PWA
  if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {
      navigator.serviceWorker
        .register("/sw.js")
        .then((registration) => {
          console.log("[App] SW registered:", registration.scope);

          // Check for updates every hour
          setInterval(() => {
            registration.update();
          }, 60 * 60 * 1000);
        })
        .catch((error) => {
          console.log("[App] SW registration failed:", error);
        });
    });
  }
});

// App initialization function - called when critical data is ready
async function initializeApp(hash, initialTab, tabRoutes) {
  // Hide skeleton
  const skeleton = document.getElementById("skeleton");
  if (skeleton) {
    skeleton.style.display = "none";
  }

  // Navigate to initial tab or route immediately
  if (tabRoutes.includes(hash)) {
    switchTab(hash);
  } else if (hash && hash !== "home") {
    navigate(hash);
  } else {
    switchTab(initialTab);
  }

  // Load Vault data asynchronously and re-render home page after loading
  loadVaultData()
    .then(() => {
      // Re-render home page if we're on it to show loaded vault data
      if (AppState.currentRoute === "home") {
        const container = document.getElementById("content");
        if (container) {
          renderHome(container);
        }
      }
    })
    .catch(err => {
      console.error("Failed to load initial vault data:", err);
      // Still re-render to show error state
      if (AppState.currentRoute === "home") {
        const container = document.getElementById("content");
        if (container) {
          renderHome(container);
        }
      }
    });
}

// ==========================================
// DASHBOARD FUNCTIONALITY
// ==========================================

// Dashboard State
const DashboardState = {
  data: null,
  filteredData: null,
  filters: {
    year: null,
    month: null,
    coin: null,
    direction: null,
    leverage: null,
  },
  sortBy: "date-desc",
  isUpdatingFilters: false,
};

// Load Dashboard Data
async function loadDashboardData() {
  try {
    const response = await fetch("data/dashboard_data.json");
    if (!response.ok) throw new Error("Failed to load dashboard data");
    const data = await response.json();
    DashboardState.data = data.positions;
    DashboardState.filteredData = data.positions;
    return data;
  } catch (error) {
    console.error("[Dashboard] Error loading data:", error);
    return null;
  }
}

// Calculate Statistics
function calculateDashboardStats(positions) {
  if (!positions || positions.length === 0) {
    return {
      totalPnl: 0,
      grossPnl: 0,
      totalFees: 0,
      totalFunding: 0,
      winningPositions: 0,
      totalPositions: 0,
      winRate: 0,
    };
  }

  const totalPnl = positions.reduce((sum, p) => sum + (p.pnl || 0), 0);
  const totalFees = positions.reduce((sum, p) => sum + (p.fee || 0), 0);
  const totalFunding = positions.reduce((sum, p) => sum + (p.funding || 0), 0);
  const grossPnl = totalPnl + totalFees;
  const winningPositions = positions.filter((p) => p.pnl > 0).length;
  const totalPositions = positions.length;
  const winRate =
    totalPositions > 0 ? (winningPositions / totalPositions) * 100 : 0;

  return {
    totalPnl,
    grossPnl,
    totalFees,
    totalFunding,
    winningPositions,
    totalPositions,
    winRate,
  };
}

// Group positions by coin for charts
function groupByCoin(positions) {
  const grouped = {};

  positions.forEach((pos) => {
    if (!grouped[pos.coin]) {
      grouped[pos.coin] = {
        coin: pos.coin,
        totalPnl: 0,
        positions: 0,
        wins: 0,
      };
    }

    grouped[pos.coin].totalPnl += pos.pnl || 0;
    grouped[pos.coin].positions++;
    if (pos.pnl > 0) grouped[pos.coin].wins++;
  });

  return Object.values(grouped);
}

// Apply Filters
async function applyDashboardFilters() {
  if (!DashboardState.data) return;

  DashboardState.filteredData = DashboardState.data.filter((position) => {
    const posDate = new Date(position.startDate);
    const year = posDate.getFullYear();
    const month = posDate.getMonth() + 1;

    if (
      DashboardState.filters.year &&
      year !== parseInt(DashboardState.filters.year)
    ) {
      return false;
    }

    if (
      DashboardState.filters.month &&
      month !== parseInt(DashboardState.filters.month)
    ) {
      return false;
    }

    if (
      DashboardState.filters.coin &&
      position.coin !== DashboardState.filters.coin
    ) {
      return false;
    }

    if (
      DashboardState.filters.direction &&
      position.direction !== DashboardState.filters.direction
    ) {
      return false;
    }

    if (
      DashboardState.filters.leverage &&
      position.leverage !== DashboardState.filters.leverage
    ) {
      return false;
    }

    return true;
  });

  // Re-render dashboard with filtered data
  // populateDashboardFilters() will restore the values from DashboardState.filters
  const container = document.querySelector(".content");
  if (container && AppState.currentRoute === "dashboard") {
    await renderDashboard(container);
  }
}

// Reset Filters
function resetDashboardFilters() {
  DashboardState.filters = {
    year: null,
    month: null,
    coin: null,
    direction: null,
    leverage: null,
  };

  // Reset all select elements
  document.querySelectorAll(".filter-select").forEach((select) => {
    select.value = "";
  });

  applyDashboardFilters();
  hapticFeedback("light");
}

// Populate filter dropdowns
function populateDashboardFilters() {
  if (!DashboardState.data) return;

  // Years
  const years = [
    ...new Set(
      DashboardState.data.map((p) => new Date(p.startDate).getFullYear())
    ),
  ].sort((a, b) => b - a);
  const yearSelect = document.getElementById("dashboard-year-filter");
  if (yearSelect) {
    const currentValue = DashboardState.filters.year;
    yearSelect.innerHTML =
      '<option value="">–í—Å–µ –≥–æ–¥—ã</option>' +
      years.map((year) => `<option value="${year}">${year}</option>`).join("");
    if (currentValue) yearSelect.value = currentValue;
  }

  // Months
  const monthSelect = document.getElementById("dashboard-month-filter");
  if (monthSelect) {
    const currentValue = DashboardState.filters.month;
    const months = {
      1: "–Ø–Ω–≤–∞—Ä—å",
      2: "–§–µ–≤—Ä–∞–ª—å",
      3: "–ú–∞—Ä—Ç",
      4: "–ê–ø—Ä–µ–ª—å",
      5: "–ú–∞–π",
      6: "–ò—é–Ω—å",
      7: "–ò—é–ª—å",
      8: "–ê–≤–≥—É—Å—Ç",
      9: "–°–µ–Ω—Ç—è–±—Ä—å",
      10: "–û–∫—Ç—è–±—Ä—å",
      11: "–ù–æ—è–±—Ä—å",
      12: "–î–µ–∫–∞–±—Ä—å",
    };
    monthSelect.innerHTML =
      '<option value="">–í—Å–µ –º–µ—Å—è—Ü—ã</option>' +
      Object.entries(months)
        .map(([num, name]) => `<option value="${num}">${name}</option>`)
        .join("");
    monthSelect.disabled = !DashboardState.filters.year;
    if (currentValue) monthSelect.value = currentValue;
  }

  // Coins
  const coins = [...new Set(DashboardState.data.map((p) => p.coin))].sort();
  const coinSelect = document.getElementById("dashboard-coin-filter");
  if (coinSelect) {
    const currentValue = DashboardState.filters.coin;
    coinSelect.innerHTML =
      '<option value="">–í—Å–µ –∞–∫—Ç–∏–≤—ã</option>' +
      coins.map((coin) => `<option value="${coin}">${coin}</option>`).join("");
    if (currentValue) coinSelect.value = currentValue;
  }

  // Directions
  const directionSelect = document.getElementById("dashboard-direction-filter");
  if (directionSelect) {
    const currentValue = DashboardState.filters.direction;
    directionSelect.innerHTML = `
      <option value="">–í—Å–µ</option>
      <option value="Long">–õ–æ–Ω–≥</option>
      <option value="Short">–®–æ—Ä—Ç</option>
    `;
    if (currentValue) directionSelect.value = currentValue;
  }

  // Leverage
  const leverages = [
    ...new Set(DashboardState.data.map((p) => p.leverage)),
  ].sort();
  const leverageSelect = document.getElementById("dashboard-leverage-filter");
  if (leverageSelect) {
    const currentValue = DashboardState.filters.leverage;
    leverageSelect.innerHTML =
      '<option value="">–í—Å–µ –ø–ª–µ—á–∏</option>' +
      leverages.map((lev) => `<option value="${lev}">${lev}</option>`).join("");
    if (currentValue) leverageSelect.value = currentValue;
  }
}

// Animate Number Counter
function animateNumber(
  element,
  start,
  end,
  duration = 1000,
  isCurrency = true
) {
  if (!element) return;

  const range = end - start;
  const increment = range / (duration / 16);
  let current = start;

  const timer = setInterval(() => {
    current += increment;

    if (
      (increment > 0 && current >= end) ||
      (increment < 0 && current <= end)
    ) {
      current = end;
      clearInterval(timer);
    }

    const roundedValue = Math.round(current);
    element.textContent = isCurrency
      ? formatCurrency(roundedValue)
      : roundedValue.toLocaleString("ru-RU");
  }, 16);
}

// Render Dashboard Stats
function renderDashboardStats(stats) {
  return `
    <div class="dashboard-stats">
      <div class="stat-card">
        <div class="stat-title">–û–±—â–∞—è –ü—Ä–∏–±—ã–ª—å</div>
        <div class="stat-value ${
          stats.totalPnl >= 0 ? "positive" : "negative"
        }" data-animate="${stats.totalPnl}">
          ${formatCurrency(0)}
        </div>
        <div class="stat-subtitle">—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π</div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">–ì—Ä–æ—Å—Å –ü—Ä–∏–±—ã–ª—å</div>
        <div class="stat-value ${
          stats.grossPnl >= 0 ? "positive" : "negative"
        }" data-animate="${stats.grossPnl}">
          ${formatCurrency(0)}
        </div>
        <div class="stat-subtitle">–¥–æ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π</div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">–£—Å–ø–µ—à–Ω—ã–µ –ü–æ–∑–∏—Ü–∏–∏</div>
        <div class="stat-value" data-animate="${
          stats.winningPositions
        }" data-type="number">0</div>
        <div class="stat-subtitle">${stats.winRate.toFixed(1)}% win rate</div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">–í—Å–µ–≥–æ –ü–æ–∑–∏—Ü–∏–π</div>
        <div class="stat-value" data-animate="${
          stats.totalPositions
        }" data-type="number">0</div>
        <div class="stat-subtitle">—Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π</div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">–ö–æ–º–∏—Å—Å–∏–∏</div>
        <div class="stat-value negative" data-animate="${stats.totalFees}">
          ${formatCurrency(0)}
        </div>
        <div class="stat-subtitle">fee</div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">–§–∞–Ω–¥–∏–Ω–≥</div>
        <div class="stat-value ${
          stats.totalFunding >= 0 ? "positive" : "negative"
        }" data-animate="${stats.totalFunding}">
          ${formatCurrency(0)}
        </div>
        <div class="stat-subtitle">funding</div>
      </div>
    </div>
  `;
}

// Render Dashboard Filters
function renderDashboardFilters() {
  return `
    <div class="dashboard-filters">
      <div class="filter-group">
        <label class="filter-label" for="dashboard-year-filter">–ì–æ–¥</label>
        <select class="filter-select" id="dashboard-year-filter" data-filter="year">
          <option value="">–í—Å–µ –≥–æ–¥—ã</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label" for="dashboard-month-filter">–ú–µ—Å—è—Ü</label>
        <select class="filter-select" id="dashboard-month-filter" data-filter="month">
          <option value="">–í—Å–µ –º–µ—Å—è—Ü—ã</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label" for="dashboard-coin-filter">–ê–∫—Ç–∏–≤</label>
        <select class="filter-select" id="dashboard-coin-filter" data-filter="coin">
          <option value="">–í—Å–µ –∞–∫—Ç–∏–≤—ã</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label" for="dashboard-direction-filter">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</label>
        <select class="filter-select" id="dashboard-direction-filter" data-filter="direction">
          <option value="">–í—Å–µ</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label" for="dashboard-leverage-filter">–ü–ª–µ—á–æ</label>
        <select class="filter-select" id="dashboard-leverage-filter" data-filter="leverage">
          <option value="">–í—Å–µ –ø–ª–µ—á–∏</option>
        </select>
      </div>
      
      <div class="filter-group" style="justify-content: flex-end;">
        <label class="filter-label" style="visibility: hidden;">Reset</label>
        <button class="btn btn-ghost" data-action="resetDashboardFilters" style="width: 100%;">
          üîÑ –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>
    </div>
  `;
}

// Render Bar Chart
function renderBarChart(data) {
  if (!data || data.length === 0) {
    return '<div class="empty-state"><p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p></div>';
  }

  const maxPnl = Math.max(...data.map((d) => Math.abs(d.totalPnl)));

  return `
    <div class="bar-chart">
      ${data
        .map((item) => {
          const percentage =
            maxPnl > 0 ? (Math.abs(item.totalPnl) / maxPnl) * 100 : 0;
          const coinColor = getCoinColor(item.coin);
          const tooltip = `${item.coin}: ${formatCurrency(item.totalPnl)} ‚Ä¢ ${
            item.positions
          } –ø–æ–∑–∏—Ü–∏–π ‚Ä¢ ${item.wins} —É—Å–ø–µ—à–Ω—ã—Ö`;

          return `
          <div class="bar-item" data-tooltip="${tooltip}">
            <span class="bar-label" style="color: ${coinColor}">${
            item.coin
          }</span>
            <div class="bar-fill-container">
              <div class="bar-fill" 
                   style="--percentage: ${percentage}%; --coin-color: ${coinColor}"
                   data-coin="${item.coin}">
              </div>
            </div>
            <span class="bar-value ${
              item.totalPnl >= 0 ? "positive" : "negative"
            }">
              ${formatCurrency(item.totalPnl)}
            </span>
          </div>
        `;
        })
        .join("")}
    </div>
  `;
}

// Render Pie Chart
function renderPieChart(data) {
  if (!data || data.length === 0) {
    return '<div class="empty-state"><p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p></div>';
  }

  const total = data.reduce((sum, item) => sum + Math.abs(item.totalPnl), 0);
  let currentAngle = 0;

  const slices = data.map((item) => {
    const percentage = total > 0 ? (Math.abs(item.totalPnl) / total) * 100 : 0;
    const angle = (percentage / 100) * 360;
    const color = getCoinColor(item.coin);

    const slice = {
      ...item,
      percentage,
      startAngle: currentAngle,
      endAngle: currentAngle + angle,
      color,
    };

    currentAngle += angle;
    return slice;
  });

  const gradientStops = slices
    .map((s) => `${s.color} ${s.startAngle}deg ${s.endAngle}deg`)
    .join(", ");

  return `
    <div class="pie-chart-container">
      <div class="pie-chart" style="--gradient-stops: ${gradientStops}">
        <div class="pie-chart-hole">
          <div class="pie-chart-total">${formatCurrency(total)}</div>
          <div class="pie-chart-label">Total PnL</div>
        </div>
      </div>
      
      <div class="pie-legend">
        ${slices
          .map(
            (slice) => `
          <div class="legend-item">
            <div class="legend-color" style="--coin-color: ${
              slice.color
            }"></div>
            <span class="legend-label">${slice.coin}</span>
            <span class="legend-value">${slice.percentage.toFixed(1)}%</span>
          </div>
        `
          )
          .join("")}
      </div>
    </div>
  `;
}

// Render Position Card
function renderPositionCard(position) {
  const coinColor = getCoinColor(position.coin);
  const directionClass = position.direction.toLowerCase();
  const directionText = position.direction === "Long" ? "–õ–æ–Ω–≥" : "–®–æ—Ä—Ç";

  return `
    <div class="position-card">
      <div class="position-header">
        <div class="position-coin">
          <span class="position-coin-symbol" style="--coin-color: ${coinColor}">${
    position.coin
  }</span>
          <span class="position-date">${position.dateRange}</span>
        </div>
        <span class="direction-badge ${directionClass}">${directionText}</span>
      </div>
      
      <div class="position-details">
        <div class="detail-item">
          <div class="detail-label">–ü–ª–µ—á–æ</div>
          <div class="detail-value">${position.leverage}</div>
        </div>
        <div class="detail-item">
          <div class="detail-label">–û–±—ä–µ–º</div>
          <div class="detail-value">${formatCurrency(
            position.volumeWithLeverage
          )}</div>
        </div>
        <div class="detail-item">
          <div class="detail-label">–ú–∞—Ä–∂–∞</div>
          <div class="detail-value">${formatCurrency(position.margin)}</div>
        </div>
        <div class="detail-item">
          <div class="detail-label">–ö–æ–º–∏—Å—Å–∏—è</div>
          <div class="detail-value">${formatCurrency(position.fee)}</div>
        </div>
        <div class="detail-item">
          <div class="detail-label">–§–∞–Ω–¥–∏–Ω–≥</div>
          <div class="detail-value ${
            position.funding >= 0 ? "positive" : "negative"
          }">
            ${formatCurrency(position.funding)}
          </div>
        </div>
        <div class="detail-item">
          <div class="detail-label">–í—Ä–µ–º—è</div>
          <div class="detail-value">${position.duration}</div>
        </div>
      </div>
      
      <div class="position-pnl">
        <span class="position-pnl-label">PnL:</span>
        <span class="position-pnl-value ${
          position.pnl >= 0 ? "positive" : "negative"
        }">
          ${formatCurrency(position.pnl)}
        </span>
      </div>
    </div>
  `;
}

// Render Positions List
function renderPositionsList(positions) {
  if (!positions || positions.length === 0) {
    return `
      <div class="empty-state">
        <div class="empty-state-icon">üìä</div>
        <div class="empty-state-title">–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π</div>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
      </div>
    `;
  }

  return `
    <div class="positions-list">
      ${positions.map((pos) => renderPositionCard(pos)).join("")}
    </div>
  `;
}

// Main Dashboard Render Function
async function renderDashboard(container) {
  // Load data if not loaded
  if (!DashboardState.data) {
    container.innerHTML = `
      <h1>–î–∞—à–±–æ—Ä–¥</h1>
      <div class="loading-message">
        <div class="skeleton" style="height: 200px; margin-bottom: var(--space-lg);"></div>
        <div class="skeleton" style="height: 300px;"></div>
      </div>
    `;

    await loadDashboardData();

    if (!DashboardState.data) {
      container.innerHTML = `
        <h1>–î–∞—à–±–æ—Ä–¥</h1>
        <div class="empty-state">
          <div class="empty-state-icon">‚ö†Ô∏è</div>
          <div class="empty-state-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞</p>
        </div>
      `;
      return;
    }
  }

  const stats = calculateDashboardStats(DashboardState.filteredData);
  const groupedData = groupByCoin(DashboardState.filteredData);
  const sortedByPnl = [...groupedData].sort(
    (a, b) => Math.abs(b.totalPnl) - Math.abs(a.totalPnl)
  );

  container.innerHTML = `
    <h1>–î–∞—à–±–æ—Ä–¥</h1>
    <p class="caption mb-lg">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π MC Recovery Fund</p>
    
    ${renderDashboardFilters()}
    
    ${renderDashboardStats(stats)}
    
    <div class="charts-grid">
      <div class="card">
        <h3 class="mb-md">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL –ø–æ –∞–∫—Ç–∏–≤–∞–º</h3>
        ${renderBarChart(sortedByPnl)}
      </div>
      
      <div class="card">
        <h3 class="mb-md">–î–æ–ª–∏ –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ</h3>
        ${renderPieChart(sortedByPnl)}
      </div>
    </div>
    
    <div class="card">
      <h3 class="mb-md">–í—Å–µ –ü–æ–∑–∏—Ü–∏–∏ (${DashboardState.filteredData.length})</h3>
      ${renderPositionsList(DashboardState.filteredData)}
    </div>
  `;

  // Initialize animations and populate filters (DOM is ready)
  initDashboardAnimations();
  populateDashboardFilters();
}

// Initialize Dashboard Animations
function initDashboardAnimations() {
  // Animate stat numbers
  document.querySelectorAll(".stat-value[data-animate]").forEach((el) => {
    const endValue = parseFloat(el.dataset.animate);
    const isNumber = el.dataset.type === "number";
    animateNumber(el, 0, endValue, 1000, !isNumber); // isCurrency = !isNumber
  });

  // Animate bar chart fills
  setTimeout(() => {
    document.querySelectorAll(".bar-fill").forEach((bar) => {
      bar.classList.add("animate");
    });
  }, 300);
}

// Handle Filter Change
async function filterDashboard(element) {
  const filterType = element.dataset.filter;
  const value = element.value;

  // Prevent event propagation during programmatic changes
  if (DashboardState.isUpdatingFilters) return;

  DashboardState.filters[filterType] = value || null;

  // Enable/disable month filter based on year selection
  if (filterType === "year") {
    const monthSelect = document.getElementById("dashboard-month-filter");
    if (monthSelect) {
      DashboardState.isUpdatingFilters = true;
      monthSelect.disabled = !value;
      if (!value) {
        monthSelect.value = "";
        DashboardState.filters.month = null;
      }
      DashboardState.isUpdatingFilters = false;
    }
  }

  await applyDashboardFilters();
  hapticFeedback("light");
}

// Get coin color (from existing function or define colors)
function getCoinColor(coin) {
  const coinColors = {
    BTC: "#F7931A",
    ETH: "#627EEA",
    SOL: "#14F195",
    HYPE: "#00D4FF",
    BNB: "#F3BA2F",
    XRP: "#23292F",
    ADA: "#0033AD",
    DOGE: "#C2A633",
    MATIC: "#8247E5",
    AVAX: "#E84142",
  };

  return coinColors[coin] || "var(--color-primary)";
}
