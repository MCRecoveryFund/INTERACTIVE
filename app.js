// MC Recovery Fund - Main Application Logic
// Part 1: Core functionality and routing
// ==========================================

// Hyperliquid API Configuration
const HYPERLIQUID_API = {
  endpoint: "https://api.hyperliquid.xyz/info",
  vaultAddress: "0x914434e8a235cb608a94a5f70ab8c40927152a24",
};

// Global State
const AppState = {
  currentRoute: "home",
  currentQuiz: null,
  currentQuestion: 0,
  quizAnswers: [],
  userData: {
    streak: 0,
    lastActiveDate: null,
    completedQuizzes: [],
    unlockedBadges: [],
    progress: { quizzes: 0, eduTopics: 0, glossaryViewed: 0 },
    settings: { theme: "auto", language: "ru" },
  },
  vaultData: {
    positions: null,
    metrics: null,
    loading: false,
    error: null,
    lastUpdated: null,
  },
};

// Telegram WebApp Integration
let tg = null;
try {
  tg = window.Telegram?.WebApp;
  if (tg) {
    tg.ready();
    tg.expand();
    tg.enableClosingConfirmation();
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if (tg.colorScheme) {
      document.documentElement.setAttribute(
        "data-theme",
        tg.colorScheme === "dark" ? "dark" : "light"
      );
    }
    if (tg.themeParams) applyTelegramTheme(tg.themeParams);

    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–º–µ–Ω—É —Ç–µ–º—ã –≤ –∫–ª–∏–µ–Ω—Ç–µ Telegram
    tg.onEvent("themeChanged", () => {
      const scheme = tg.colorScheme === "dark" ? "dark" : "light";
      const r = document.documentElement;
      r.setAttribute("data-theme", scheme);
      // —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
      // —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
      r.style.removeProperty("--color-text");
      r.style.removeProperty("--color-bg");
      if (tg.themeParams) applyTelegramTheme(tg.themeParams);
    });
    tg.MainButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    tg.MainButton.hide();
  }
} catch (e) {
  console.log("Running outside Telegram WebApp");
}

function applyTelegramTheme(params) {
  const root = document.documentElement;
  // –ù–ï –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Ç–µ–º—ã (--color-bg/--color-text)!
  // –ê–∫—Ü–µ–Ω—Ç/–∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Telegram:
  if (params.button_color) {
    root.style.setProperty("--color-primary", params.button_color);
  }
  // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —ç–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º ¬´—Å—ã—Ä–∞—è¬ª –ø–∞–ª–∏—Ç—Ä–∞ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
  if (params.bg_color) root.style.setProperty("--tg-bg", params.bg_color);
  if (params.text_color) root.style.setProperty("--tg-text", params.text_color);
}

function hapticFeedback(type = "light") {
  try {
    if (tg?.HapticFeedback) {
      if (type === "success" || type === "error") {
        tg.HapticFeedback.notificationOccurred(type);
      } else {
        tg.HapticFeedback.impactOccurred(type);
      }
    }
  } catch (e) {}
}

function saveUserData() {
  try {
    localStorage.setItem(
      "mc_recovery_user_data",
      JSON.stringify(AppState.userData)
    );
  } catch (e) {
    console.error("Failed to save:", e);
  }
}

function loadUserData() {
  try {
    const saved = localStorage.getItem("mc_recovery_user_data");
    if (saved) {
      AppState.userData = { ...AppState.userData, ...JSON.parse(saved) };
      updateStreak();
    }
  } catch (e) {
    console.error("Failed to load:", e);
  }
}

function updateStreak() {
  const today = new Date().toDateString();
  const lastActive = AppState.userData.lastActiveDate;
  if (lastActive !== today) {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    if (lastActive === yesterday.toDateString()) {
      AppState.userData.streak += 1;
    } else if (lastActive) {
      AppState.userData.streak = 1;
    }
    AppState.userData.lastActiveDate = today;
    saveUserData();
  }
}

function navigate(route, params = {}) {
  hapticFeedback("light");
  AppState.currentRoute = route;
  window.location.hash = route;
  if (tg?.MainButton) tg.MainButton.hide();
  const backBtn = document.getElementById("backBtn");
  backBtn.style.display = route === "home" ? "none" : "flex";
  renderRoute(route, params);
}

function renderRoute(route, params) {
  const content = document.getElementById("content");
  switch (route) {
    case "home":
      renderHome(content);
      break;
    case "quizzes":
      renderQuizzes(content);
      break;
    case "quiz":
      renderQuiz(content, params.id);
      break;
    case "quiz-question":
      renderQuizQuestion(content);
      break;
    case "quiz-result":
      renderQuizResult(content);
      break;
    case "edu":
      renderEdu(content);
      break;
    case "progress":
      renderProgress(content);
      break;
    case "achievements":
      renderAchievements(content);
      break;
    case "glossary":
      renderGlossary(content);
      break;
    case "simulator":
      renderSimulator(content);
      break;
    case "help":
      renderHelp(content);
      break;
    case "profile":
      renderProfile(content);
      break;
    case "instructions":
      renderInstructions(content);
      break;
    case "announcements":
      renderAnnouncements(content);
      break;
    case "broadcasts":
      renderBroadcasts(content);
      break;
    case "dashboard":
      renderDashboard(content);
      break;
    case "support":
      renderSupport(content);
      break;
    case "documents":
      renderDocuments(content);
      break;
    case "faq":
      renderFAQ(content);
      break;
    default:
      renderHome(content);
  }
}

function getDaysWord(num) {
  if (num % 10 === 1 && num % 100 !== 11) return "–¥–µ–Ω—å";
  if ([2, 3, 4].includes(num % 10) && ![12, 13, 14].includes(num % 100))
    return "–¥–Ω—è";
  return "–¥–Ω–µ–π";
}

function getDifficultyLabel(level) {
  const labels = { easy: "–õ–µ–≥–∫–∏–π", medium: "–°—Ä–µ–¥–Ω–∏–π", hard: "–°–ª–æ–∂–Ω—ã–π" };
  return labels[level] || level;
}

function getDifficultyColor(level) {
  const colors = {
    easy: "var(--color-success)",
    medium: "var(--color-primary)",
    hard: "var(--color-error)",
  };
  return colors[level] || "var(--color-text)";
}

// ==========================================
// Hyperliquid API Functions
// ==========================================

async function fetchHyperliquidData(requestBody) {
  try {
    const response = await fetch(HYPERLIQUID_API.endpoint, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(requestBody),
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error("Hyperliquid API error:", error);
    throw error;
  }
}

async function fetchVaultPositions() {
  return fetchHyperliquidData({
    type: "clearinghouseState",
    user: HYPERLIQUID_API.vaultAddress,
  });
}

async function fetchVaultDetails() {
  return fetchHyperliquidData({
    type: "vaultDetails",
    vaultAddress: HYPERLIQUID_API.vaultAddress,
  });
}

async function loadVaultData() {
  if (AppState.vaultData.loading) return;

  AppState.vaultData.loading = true;
  AppState.vaultData.error = null;

  try {
    const [positions, details] = await Promise.all([
      fetchVaultPositions(),
      fetchVaultDetails(),
    ]);

    AppState.vaultData.positions = positions;
    AppState.vaultData.metrics = details;
    AppState.vaultData.lastUpdated = Date.now();
    AppState.vaultData.loading = false;

    return { positions, details };
  } catch (error) {
    AppState.vaultData.error = error.message;
    AppState.vaultData.loading = false;
    throw error;
  }
}

function formatNumber(num, decimals = 2) {
  if (!num) return "0";
  const n = parseFloat(num);
  if (isNaN(n)) return "0";
  return n.toLocaleString("en-US", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  });
}

function formatCurrency(num) {
  return "$" + formatNumber(num, 2);
}

function formatPercent(num) {
  return formatNumber(num * 100, 2) + "%";
}

function renderVaultWidget() {
  const { positions, metrics, loading, error, lastUpdated } =
    AppState.vaultData;

  if (loading) {
    return `
      <div class="card vault-widget" id="vaultWidget">
        <h3>üè¶ MC Recovery Vault</h3>
        <div style="text-align: center; padding: var(--space-xl) 0;">
          <div class="spinner"></div>
          <p class="caption" style="margin-top: var(--space-md);">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    `;
  }

  if (error) {
    return `
      <div class="card vault-widget" id="vaultWidget">
        <h3>üè¶ MC Recovery Vault</h3>
        <div style="text-align: center; padding: var(--space-lg) 0;">
          <p style="color: var(--color-error);">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error}</p>
          <button class="btn btn-secondary" data-action="refreshVault" style="margin-top: var(--space-md);">–û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>
      </div>
    `;
  }

  if (!positions || !metrics) {
    return `
      <div class="card vault-widget" id="vaultWidget">
        <h3>üè¶ MC Recovery Vault</h3>
        <div style="text-align: center; padding: var(--space-lg) 0;">
          <p class="caption">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
          <button class="btn btn-secondary" data-action="refreshVault" style="margin-top: var(--space-md);">–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        </div>
      </div>
    `;
  }

  // Extract metrics
  const accountValue = positions.marginSummary?.accountValue || "0";
  const totalMarginUsed = positions.marginSummary?.totalMarginUsed || "0";
  const totalNtlPos = positions.marginSummary?.totalNtlPos || "0";
  const apr = metrics.apr || 0;

  // Get portfolio data for allTime PnL
  const allTimeData = metrics.portfolio?.find(
    ([period]) => period === "allTime"
  )?.[1];
  const pnlHistory = allTimeData?.pnlHistory || [];
  const latestPnl =
    pnlHistory.length > 0 ? pnlHistory[pnlHistory.length - 1][1] : "0";

  // Open positions
  const openPositions =
    positions.assetPositions?.filter((ap) => ap.position) || [];

  const lastUpdateTime = lastUpdated
    ? new Date(lastUpdated).toLocaleTimeString("ru-RU")
    : "";

  return `
    <div class="card vault-widget" id="vaultWidget">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-md);">
        <h3>üè¶ MC Recovery Vault</h3>
        <button class="btn-icon" data-action="refreshVault" aria-label="–û–±–Ω–æ–≤–∏—Ç—å" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
          </svg>
        </button>
      </div>
      
      <div class="vault-metrics">
        <div class="vault-metric">
          <span class="caption">Account Value</span>
          <strong style="font-size: 20px; color: var(--color-success);">${formatCurrency(
            accountValue
          )}</strong>
        </div>
        <div class="vault-metric">
          <span class="caption">APR</span>
          <strong style="font-size: 18px; color: var(--color-primary);">${formatPercent(
            apr
          )}</strong>
        </div>
        <div class="vault-metric">
          <span class="caption">All-Time PnL</span>
          <strong style="font-size: 18px; color: ${
            parseFloat(latestPnl) >= 0
              ? "var(--color-success)"
              : "var(--color-error)"
          };">$
            ${formatNumber(latestPnl)}</strong>
        </div>
      </div>
      
      <div style="margin-top: var(--space-lg);">
        <h4 style="font-size: 16px; margin-bottom: var(--space-sm);">–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (${
          openPositions.length
        })</h4>
        ${
          openPositions.length === 0
            ? '<p class="caption">–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</p>'
            : `<div class="vault-positions">
              ${openPositions
                .map((ap) => {
                  const pos = ap.position;
                  const pnl = parseFloat(pos.unrealizedPnl || 0);
                  const isProfit = pnl >= 0;
                  return `
                  <div class="vault-position">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                      <span style="font-weight: 600;">${pos.coin}</span>
                      <span style="color: ${
                        isProfit ? "var(--color-success)" : "var(--color-error)"
                      }; font-weight: 600;">
                        ${isProfit ? "+" : ""}${formatCurrency(pnl)}
                      </span>
                    </div>
                    <div style="display: flex; gap: var(--space-md); margin-top: var(--space-xs);">
                      <span class="caption">Size: ${pos.szi}</span>
                      <span class="caption">Entry: $${formatNumber(
                        pos.entryPx
                      )}</span>
                      <span class="caption">Leverage: ${
                        pos.leverage?.value || "N/A"
                      }x</span>
                    </div>
                  </div>
                `;
                })
                .join("")}
            </div>`
        }
      </div>
      
      <div style="margin-top: var(--space-md); text-align: right;">
        <span class="caption" style="font-size: 12px;">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}</span>
      </div>
      
      <div style="margin-top: var(--space-md);">
        <a href="https://app.hyperliquid.xyz/vaults/${
          HYPERLIQUID_API.vaultAddress
        }" 
           class="btn btn-primary" 
           data-action="openLink" 
           data-url="https://app.hyperliquid.xyz/vaults/${
             HYPERLIQUID_API.vaultAddress
           }"
           style="width: 100%; text-align: center; text-decoration: none; display: block;">
          üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Hyperliquid
        </a>
      </div>
    </div>
  `;
}

function renderHome(container) {
  const streak = AppState.userData.streak;
  const completedQuizzes = AppState.userData.completedQuizzes.length;
  container.innerHTML = `
    <div class="hero">
      <h1 class="hero-title">MC Recovery Fund</h1>
      <p class="hero-subtitle">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</p>
      <p class="hero-description">
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MC Recovery Fund. 
        –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–∏–∑—ã, –∏–∑—É—á–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è.
      </p>
    </div>
    ${
      streak > 0
        ? `<div style="text-align: center; margin: var(--space-lg) 0;">
      <div class="streak"><span class="streak-icon">üî•</span><span>–í–∞—à–∞ —Å–µ—Ä–∏—è: ${streak} ${getDaysWord(
            streak
          )}</span></div>
    </div>`
        : ""
    }
    ${renderVaultWidget()}
    <div class="nav-grid" style="margin-top: var(--space-xl);">
      <div class="nav-card" data-action="navigate" data-route="instructions"><div class="nav-card-icon">üìñ</div><div class="nav-card-title">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</div></div>
      <div class="nav-card" data-action="navigate" data-route="dashboard"><div class="nav-card-icon">üìä</div><div class="nav-card-title">–î–∞—à–±–æ—Ä–¥</div></div>
      <div class="nav-card" data-action="navigate" data-route="broadcasts"><div class="nav-card-icon">üì°</div><div class="nav-card-title">–≠—Ñ–∏—Ä—ã</div></div>
      <div class="nav-card" data-action="navigate" data-route="announcements"><div class="nav-card-icon">üì¢</div><div class="nav-card-title">–ê–Ω–æ–Ω—Å—ã</div></div>
      <div class="nav-card" data-action="navigate" data-route="documents"><div class="nav-card-icon">üìÑ</div><div class="nav-card-title">–î–æ–∫—É–º–µ–Ω—Ç—ã</div></div>
      <div class="nav-card" data-action="navigate" data-route="faq"><div class="nav-card-icon">‚ùì</div><div class="nav-card-title">FAQ</div></div>
      <div class="nav-card" data-action="navigate" data-route="quizzes"><div class="nav-card-icon">üéØ</div><div class="nav-card-title">–ö–≤–∏–∑—ã</div></div>
      <div class="nav-card" data-action="navigate" data-route="edu"><div class="nav-card-icon">üéì</div><div class="nav-card-title">–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞</div></div>
      <div class="nav-card" data-action="navigate" data-route="glossary"><div class="nav-card-icon">üìö</div><div class="nav-card-title">–ì–ª–æ—Å—Å–∞—Ä–∏–π</div></div>
      <div class="nav-card" data-action="navigate" data-route="progress"><div class="nav-card-icon">üìà</div><div class="nav-card-title">–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</div></div>
      <div class="nav-card" data-action="navigate" data-route="achievements"><div class="nav-card-icon">üèÜ</div><div class="nav-card-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div></div>
      <div class="nav-card" data-action="navigate" data-route="support"><div class="nav-card-icon">üí¨</div><div class="nav-card-title">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</div></div>
    </div>
    <div class="preview-cards">
      <div class="preview-card"><div class="preview-label">–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</div><p><strong>${completedQuizzes}</strong> –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤</p><p><strong>${
    AppState.userData.progress.glossaryViewed
  }</strong> –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤</p></div>
      <div class="preview-card"><div class="preview-label">–¢–µ–º–∞ –¥–Ω—è</div><p><strong>–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è</strong></p><p class="caption">–ò–∑—É—á–∏—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∞–∫—Ç–∏–≤—ã</p></div>
    </div>
    <div class="footer"><p class="disclaimer">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–æ—Å—è—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.</p><p class="caption">–í–µ—Ä—Å–∏—è 1.0.0</p> <p class="caption">¬©Copyright 2025 MC Recovery Fund ‚Äî designed &amp; developed by the MC
        Recovery Fund team.</p></div>
  `;
}

function renderQuizzes(container) {
  const quizzes = window.APP_DATA.quizzes;
  container.innerHTML = `
    <h1>–ö–≤–∏–∑—ã</h1>
    <p class="caption mb-lg">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö</p>
    <div class="card-grid">
      ${quizzes
        .map((quiz) => {
          const isCompleted = AppState.userData.completedQuizzes.includes(
            quiz.id
          );
          return `<div class="card card-interactive" data-action="navigate" data-route="quiz" data-quiz-id="${
            quiz.id
          }">
          <div style="display: flex; justify-content: space-between; align-items: start;">
            <h3>${quiz.title}</h3>${
            isCompleted ? '<span style="font-size: 24px;">‚úì</span>' : ""
          }
          </div>
          <p class="caption mb-md">${quiz.description}</p>
          <div style="display: flex; gap: var(--space-md); flex-wrap: wrap;">
            <span class="caption">üìù ${quiz.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
            <span class="caption">‚è±Ô∏è ~${quiz.duration} –º–∏–Ω</span>
            <span class="caption" style="color: ${getDifficultyColor(
              quiz.difficulty
            )}">${getDifficultyLabel(quiz.difficulty)}</span>
          </div>
        </div>`;
        })
        .join("")}
    </div>
  `;
}

function renderQuiz(container, quizId) {
  const quiz = window.APP_DATA.quizzes.find((q) => q.id === quizId);
  if (!quiz) {
    navigate("quizzes");
    return;
  }
  const isCompleted = AppState.userData.completedQuizzes.includes(quizId);
  container.innerHTML = `
    <div class="card">
      <h1>${quiz.title}</h1>
      <p>${quiz.description}</p>
      <div style="margin: var(--space-lg) 0;">
        <div style="display: flex; gap: var(--space-md); margin-bottom: var(--space-md);">
          <span class="caption">üìù ${quiz.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
          <span class="caption">‚è±Ô∏è ~${quiz.duration} –º–∏–Ω</span>
        </div>
        <p class="caption"><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${getDifficultyLabel(
          quiz.difficulty
        )}</p>
        ${
          isCompleted
            ? `<div style="margin-top: var(--space-md); padding: var(--space-md); background: var(--color-success); border-radius: var(--radius-md);"><p style="margin: 0;">‚úì –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑</p></div>`
            : ""
        }
      </div>
      <button class="btn btn-primary" data-action="startQuiz" data-quiz-id="${quizId}" style="width: 100%;">${
    isCompleted ? "–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑" : "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑"
  }</button>
    </div>
  `;
}

function startQuiz(quizId) {
  hapticFeedback("medium");
  const quiz = window.APP_DATA.quizzes.find((q) => q.id === quizId);
  if (!quiz) return;
  AppState.currentQuiz = quiz;
  AppState.currentQuestion = 0;
  AppState.quizAnswers = [];
  navigate("quiz-question");
}

function renderQuizQuestion(container) {
  const quiz = AppState.currentQuiz;
  const questionIndex = AppState.currentQuestion;
  const question = quiz.questions[questionIndex];
  const progress = ((questionIndex + 1) / quiz.questions.length) * 100;
  container.innerHTML = `
    <div class="quiz-header">
      <span class="quiz-counter">${questionIndex + 1} / ${
    quiz.questions.length
  }</span>
      ${
        AppState.userData.streak > 0
          ? `<div class="streak"><span class="streak-icon">üî•</span><span>${AppState.userData.streak}</span></div>`
          : ""
      }
    </div>
    <div class="progress-bar"><div class="progress-fill" style="width: ${progress}%"></div></div>
    <h2 class="quiz-question">${question.question}</h2>
    <div class="quiz-options" id="quizOptions">
      ${question.options
        .map(
          (option, index) =>
            `<div class="quiz-option" data-index="${index}" data-action="selectAnswer">${option}</div>`
        )
        .join("")}
    </div>
    <div class="quiz-actions">
      <button class="btn btn-ghost" data-action="showHint">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</button>
      <button class="btn btn-ghost" data-action="skipQuestion">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
    </div>
    <div id="hintBox" class="hidden" style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--color-primary-light); border-radius: var(--radius-md);">
      <p><strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> ${
        question.hint || "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
      }</p>
    </div>
  `;
  if (tg?.MainButton) {
    tg.MainButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    tg.MainButton.show();
    tg.MainButton.onClick(submitAnswer);
  }
}

function selectAnswer(index) {
  hapticFeedback("light");
  document
    .querySelectorAll(".quiz-option")
    .forEach((opt) => opt.classList.remove("card-selected"));
  document
    .querySelectorAll(".quiz-option")
    [index].classList.add("card-selected");
  AppState.selectedAnswer = index;
}

function submitAnswer() {
  if (AppState.selectedAnswer === undefined) {
    hapticFeedback("error");
    return;
  }
  const quiz = AppState.currentQuiz;
  const question = quiz.questions[AppState.currentQuestion];
  const isCorrect = AppState.selectedAnswer === question.correct;
  const options = document.querySelectorAll(".quiz-option");
  options[AppState.selectedAnswer].classList.remove("card-selected");
  if (isCorrect) {
    options[AppState.selectedAnswer].classList.add("card-correct");
    hapticFeedback("success");
  } else {
    options[AppState.selectedAnswer].classList.add("card-incorrect");
    options[question.correct].classList.add("card-correct");
    hapticFeedback("error");
  }
  AppState.quizAnswers.push({
    questionIndex: AppState.currentQuestion,
    selectedAnswer: AppState.selectedAnswer,
    correct: isCorrect,
  });
  if (tg?.MainButton) tg.MainButton.hide();
  setTimeout(() => {
    AppState.currentQuestion++;
    AppState.selectedAnswer = undefined;
    if (AppState.currentQuestion < quiz.questions.length) {
      navigate("quiz-question");
    } else {
      finishQuiz();
    }
  }, 1500);
}

function showHint() {
  hapticFeedback("light");
  document.getElementById("hintBox").classList.toggle("hidden");
}

function skipQuestion() {
  hapticFeedback("light");
  AppState.quizAnswers.push({
    questionIndex: AppState.currentQuestion,
    selectedAnswer: null,
    correct: false,
  });
  AppState.currentQuestion++;
  AppState.selectedAnswer = undefined;
  if (AppState.currentQuestion < AppState.currentQuiz.questions.length) {
    navigate("quiz-question");
  } else {
    finishQuiz();
  }
}

function finishQuiz() {
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const percentage = Math.round((correctCount / totalQuestions) * 100);

  if (!AppState.userData.completedQuizzes.includes(quiz.id)) {
    AppState.userData.completedQuizzes.push(quiz.id);
    AppState.userData.progress.quizzes++;
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ (100%)
  if (percentage === 100) {
    if (!AppState.userData.perfectQuizzes) {
      AppState.userData.perfectQuizzes = 0;
    }
    AppState.userData.perfectQuizzes++;
  }

  updateStreak();
  checkBadges();
  saveUserData();
  navigate("quiz-result");
}

function checkBadges() {
  const badges = [
    // –ö–≤–∏–∑—ã
    {
      id: "first_quiz",
      condition: () => AppState.userData.completedQuizzes.length >= 1,
    },
    {
      id: "quiz_3",
      condition: () => AppState.userData.completedQuizzes.length >= 3,
    },
    {
      id: "quiz_5",
      condition: () => AppState.userData.completedQuizzes.length >= 5,
    },
    {
      id: "quiz_10",
      condition: () => AppState.userData.completedQuizzes.length >= 10,
    },
    {
      id: "quiz_20",
      condition: () => AppState.userData.completedQuizzes.length >= 20,
    },
    {
      id: "quiz_50",
      condition: () => AppState.userData.completedQuizzes.length >= 50,
    },
    {
      id: "perfect_quiz",
      condition: () => (AppState.userData.perfectQuizzes || 0) >= 1,
    },
    {
      id: "perfect_3",
      condition: () => (AppState.userData.perfectQuizzes || 0) >= 3,
    },
    {
      id: "perfect_10",
      condition: () => (AppState.userData.perfectQuizzes || 0) >= 10,
    },

    // –°–µ—Ä–∏–∏
    { id: "streak_3", condition: () => AppState.userData.streak >= 3 },
    { id: "streak_7", condition: () => AppState.userData.streak >= 7 },
    { id: "streak_14", condition: () => AppState.userData.streak >= 14 },
    { id: "streak_30", condition: () => AppState.userData.streak >= 30 },
    { id: "streak_60", condition: () => AppState.userData.streak >= 60 },
    { id: "streak_100", condition: () => AppState.userData.streak >= 100 },
    { id: "streak_365", condition: () => AppState.userData.streak >= 365 },

    // –ì–ª–æ—Å—Å–∞—Ä–∏–π
    {
      id: "glossary_10",
      condition: () => AppState.userData.progress.glossaryViewed >= 10,
    },
    {
      id: "glossary_25",
      condition: () => AppState.userData.progress.glossaryViewed >= 25,
    },
    {
      id: "glossary_50",
      condition: () => AppState.userData.progress.glossaryViewed >= 50,
    },
    {
      id: "glossary_master",
      condition: () => {
        const total = window.APP_DATA?.glossary?.length || 100;
        return AppState.userData.progress.glossaryViewed >= total;
      },
    },

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    { id: "first_visit", condition: () => true }, // –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    {
      id: "explorer",
      condition: () => (AppState.userData.visitedSections || []).length >= 12,
    },

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    {
      id: "completionist",
      condition: () => AppState.userData.unlockedBadges.length >= 40,
    },
  ];

  badges.forEach((badge) => {
    if (
      badge.condition() &&
      !AppState.userData.unlockedBadges.includes(badge.id)
    ) {
      AppState.userData.unlockedBadges.push(badge.id);
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      showBadgeNotification(badge.id);
    }
  });
}

function showBadgeNotification(badgeId) {
  // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
  hapticFeedback("success");
  console.log(`üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${badgeId}`);
}

function renderQuizResult(container) {
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const percentage = Math.round((correctCount / totalQuestions) * 100);
  let badge = "ü•â",
    badgeText = "–ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
    badgeColor = "var(--color-premium)";
  if (percentage >= 90) {
    badge = "ü•á";
    badgeText = "–ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å";
    badgeColor = "var(--color-gold)";
  } else if (percentage >= 70) {
    badge = "ü•à";
    badgeText = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å";
  }
  container.innerHTML = `<div class="result-card"><h1>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!</h1><div class="result-badge"><div class="badge" style="background-color: ${badgeColor}; animation: unlockBadge var(--transition-slow);">${badge}</div></div><p class="result-score">${correctCount} / ${totalQuestions}</p><p><strong>${percentage}%</strong> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p><p class="caption">${badgeText}</p>${
    percentage < 70
      ? `<div style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--color-primary-light); border-radius: var(--radius-md);"><p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong></p><ul style="text-align: left; margin-top: var(--space-sm);"><li>–ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–¥–µ–æ"</li><li>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–ª–æ—Å—Å–∞—Ä–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤</li><li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â—ë —Ä–∞–∑</li></ul></div>`
      : ""
  }<div class="result-actions"><button class="btn btn-primary" data-action="downloadResult">üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</button><button class="btn btn-secondary" data-action="shareResult">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button><button class="btn btn-ghost" data-action="startQuiz" data-quiz-id="${
    quiz.id
  }"> üîÅ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑</button><button class="btn btn-ghost" data-action="navigate" data-route="quizzes">–í—Å–µ –∫–≤–∏–∑—ã</button></div></div>`;
}

function downloadResult() {
  hapticFeedback("success");
  const quiz = AppState.currentQuiz;
  const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
  const totalQuestions = quiz.questions.length;
  const resultHTML = `<html><head><meta charset="UTF-8"><style>body{font-family:Inter,sans-serif;padding:40px;background:linear-gradient(135deg,#C6D9FD 0%,white 100%)}.card{background:white;padding:40px;border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,0.1);text-align:center;max-width:400px;margin:0 auto}h1{color:#1326FD;font-size:32px}.score{font-size:48px;color:#1326FD;margin:20px 0}</style></head><body><div class="card"><h1>MC Recovery Fund</h1><p><strong>${
    quiz.title
  }</strong></p><div class="score">${correctCount}/${totalQuestions}</div><p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${Math.round(
    (correctCount / totalQuestions) * 100
  )}%</p></div></body></html>`;
  const blob = new Blob([resultHTML], { type: "text/html" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `mc-recovery-${quiz.id}-result.html`;
  a.click();
}

function shareResult() {
  hapticFeedback("light");
  if (navigator.share && AppState.currentQuiz) {
    const quiz = AppState.currentQuiz;
    const correctCount = AppState.quizAnswers.filter((a) => a.correct).length;
    const totalQuestions = quiz.questions.length;
    const percentage = Math.round((correctCount / totalQuestions) * 100);
    navigator
      .share({
        title: `MC Recovery Fund - ${quiz.title}`,
        text: `–Ø –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ "${quiz.title}" –∏ –Ω–∞–±—Ä–∞–ª ${percentage}%! –ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã!`,
      })
      .catch(() => {});
  } else {
    alert("–§—É–Ω–∫—Ü–∏—è share –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
  }
}

function renderEdu(container) {
  const topics = window.APP_DATA.edu;
  container.innerHTML = `<h1>–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–¥–µ–æ</h1><p class="caption mb-lg">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö</p><div class="card-grid">${topics
    .map(
      (topic) =>
        `<div class="collapsible"><div class="collapsible-header" data-action="toggleCollapsible"><span><strong>${
          topic.title
        }</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>${
          topic.description
        }</p>${topic.sections
          .map(
            (section) =>
              `<div style="margin: var(--space-lg) 0; padding: var(--space-md); background: rgba(0,0,0,0.02); border-radius: var(--radius-md);"><h4>${
                section.title
              }</h4><p class="caption">${section.content}</p>${
                section.stat
                  ? `<p style="color: var(--color-success); font-weight: 600;">${section.stat}</p>`
                  : ""
              }</div>`
          )
          .join("")}${
          topic.videoUrl
            ? `<button class="btn btn-primary" data-action="openVideo" data-url="${topic.videoUrl}">‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</button>`
            : ""
        }</div></div></div>`
    )
    .join("")}</div>`;
}

function toggleCollapsible(header) {
  hapticFeedback("light");
  const content = header.nextElementSibling;
  const icon = header.querySelector(".collapsible-icon");
  content.classList.toggle("open");
  icon.classList.toggle("open");
}

function openVideo(url) {
  hapticFeedback("light");
  if (tg) {
    tg.openLink(url);
  } else {
    window.open(url, "_blank");
  }
}

function renderProgress(container) {
  const userData = AppState.userData;
  const quizzesTotal = window.APP_DATA.quizzes.length;
  const glossaryTotal = window.APP_DATA.glossary.length;
  const quizzesPercent = Math.round(
    (userData.completedQuizzes.length / quizzesTotal) * 100
  );
  const glossaryPercent = Math.round(
    (userData.progress.glossaryViewed / glossaryTotal) * 100
  );
  container.innerHTML = `<h1>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h1>${
    userData.streak > 0
      ? `<div class="card mb-lg" style="text-align: center;"><div class="streak" style="font-size: 20px; padding: var(--space-lg);"><span class="streak-icon" style="font-size: 40px;">üî•</span><div><p style="margin: 0;"><strong>${
          userData.streak
        } ${getDaysWord(
          userData.streak
        )}</strong></p><p class="caption" style="margin: 0;">–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</p></div></div></div>`
      : ""
  }<div class="card mb-lg"><h3>–ö–≤–∏–∑—ã</h3><div class="progress-bar"><div class="progress-fill" style="width: ${quizzesPercent}%"></div></div><p class="caption">${
    userData.completedQuizzes.length
  } –∏–∑ ${quizzesTotal} –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${quizzesPercent}%)</p></div><div class="card mb-lg"><h3>–ì–ª–æ—Å—Å–∞—Ä–∏–π</h3><div class="progress-bar"><div class="progress-fill" style="width: ${glossaryPercent}%"></div></div><p class="caption">${
    userData.progress.glossaryViewed
  } –∏–∑ ${glossaryTotal} –∏–∑—É—á–µ–Ω–æ (${glossaryPercent}%)</p></div><div class="card"><h3>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3><p class="caption">${
    userData.unlockedBadges.length
  } –±–µ–π–¥–∂–µ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p><button class="btn btn-secondary" data-action="navigate" data-route="achievements" style="width: 100%; margin-top: var(--space-md);">–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</button></div>`;
}

function renderAchievements(container) {
  const allBadges = [
    // üéØ –ö–≤–∏–∑—ã (12 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "first_quiz",
      icon: "üéì",
      name: "–ü–µ—Ä–≤—ã–π —à–∞–≥",
      desc: "–ó–∞–≤–µ—Ä—à—ë–Ω –ø–µ—Ä–≤—ã–π –∫–≤–∏–∑",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 1 –∫–≤–∏–∑",
      category: "quiz",
    },
    {
      id: "quiz_3",
      icon: "üìù",
      name: "–ù–æ–≤–∏—á–æ–∫",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 3 –∫–≤–∏–∑–∞",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 3 –∫–≤–∏–∑–∞",
      category: "quiz",
    },
    {
      id: "quiz_5",
      icon: "üèÖ",
      name: "–ó–Ω–∞—Ç–æ–∫",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 5 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 5 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "quiz_10",
      icon: "üéñÔ∏è",
      name: "–≠–∫—Å–ø–µ—Ä—Ç",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 10 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 10 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "quiz_20",
      icon: "üèÜ",
      name: "–ú–∞—Å—Ç–µ—Ä",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 20 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 20 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "quiz_50",
      icon: "üëë",
      name: "–õ–µ–≥–µ–Ω–¥–∞",
      desc: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 50 –∫–≤–∏–∑–æ–≤",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ 50 –∫–≤–∏–∑–æ–≤",
      category: "quiz",
    },
    {
      id: "perfect_quiz",
      icon: "üíé",
      name: "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç",
      desc: "100% –≤ –∫–≤–∏–∑–µ",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –∫–≤–∏–∑–µ",
      category: "quiz",
    },
    {
      id: "perfect_3",
      icon: "üí†",
      name: "–ë–µ–∑—É–ø—Ä–µ—á–Ω—ã–π",
      desc: "3 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–∞",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ 3 –∫–≤–∏–∑–∞—Ö",
      category: "quiz",
    },
    {
      id: "perfect_10",
      icon: "‚ú®",
      name: "–ù–µ–ø–æ–±–µ–¥–∏–º—ã–π",
      desc: "10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–æ–≤",
      condition: "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ 10 –∫–≤–∏–∑–∞—Ö",
      category: "quiz",
    },
    {
      id: "speed_demon",
      icon: "‚ö°",
      name: "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π",
      desc: "–ö–≤–∏–∑ –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
      category: "quiz",
    },
    {
      id: "no_hints",
      icon: "üß†",
      name: "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π",
      desc: "–ö–≤–∏–∑ –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Å–∫–∞–∑–∫–∏",
      category: "quiz",
    },
    {
      id: "comeback",
      icon: "üîÑ",
      name: "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ",
      desc: "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ",
      condition: "–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ —Å –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
      category: "quiz",
    },

    // üî• –°–µ—Ä–∏–∏ (10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "streak_3",
      icon: "üî•",
      name: "–¢—Ä–∏ –¥–Ω—è",
      desc: "–°–µ—Ä–∏—è 3 –¥–Ω—è",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_7",
      icon: "üåü",
      name: "–ù–µ–¥–µ–ª—è",
      desc: "–°–µ—Ä–∏—è 7 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_14",
      icon: "üí´",
      name: "–î–≤–µ –Ω–µ–¥–µ–ª–∏",
      desc: "–°–µ—Ä–∏—è 14 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_30",
      icon: "‚≠ê",
      name: "–ú–µ—Å—è—Ü",
      desc: "–°–µ—Ä–∏—è 30 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_60",
      icon: "üå†",
      name: "–î–≤–∞ –º–µ—Å—è—Ü–∞",
      desc: "–°–µ—Ä–∏—è 60 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 60 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_100",
      icon: "üéÜ",
      name: "–°–æ—Ç–Ω—è",
      desc: "–°–µ—Ä–∏—è 100 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "streak_365",
      icon: "üéá",
      name: "–ì–æ–¥ –≤–º–µ—Å—Ç–µ",
      desc: "–°–µ—Ä–∏—è 365 –¥–Ω–µ–π",
      condition: "–ó–∞—Ö–æ–¥–∏—Ç–µ –≥–æ–¥ –ø–æ–¥—Ä—è–¥",
      category: "streak",
    },
    {
      id: "early_bird",
      icon: "üåÖ",
      name: "–†–∞–Ω–Ω—è—è –ø—Ç–∏—Ü–∞",
      desc: "–í—Ö–æ–¥ –¥–æ 6 —É—Ç—Ä–∞",
      condition: "–ó–∞–π–¥–∏—Ç–µ –¥–æ 6:00 —É—Ç—Ä–∞",
      category: "streak",
    },
    {
      id: "night_owl",
      icon: "ü¶â",
      name: "–ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
      desc: "–í—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏",
      condition: "–ó–∞–π–¥–∏—Ç–µ –ø–æ—Å–ª–µ 00:00",
      category: "streak",
    },
    {
      id: "weekend_warrior",
      icon: "üéÆ",
      name: "–í—ã—Ö–æ–¥–Ω–æ–π –≤–æ–∏–Ω",
      desc: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
      condition: "–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã –≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      category: "streak",
    },

    // üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π (8 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "glossary_10",
      icon: "üìñ",
      name: "–ß–∏—Ç–∞—Ç–µ–ª—å",
      desc: "–ò–∑—É—á–µ–Ω–æ 10 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 10 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "glossary_25",
      icon: "üìï",
      name: "–°—Ç—É–¥–µ–Ω—Ç",
      desc: "–ò–∑—É—á–µ–Ω–æ 25 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 25 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "glossary_50",
      icon: "üìó",
      name: "–ì—Ä–∞–º–æ—Ç–Ω—ã–π",
      desc: "–ò–∑—É—á–µ–Ω–æ 50 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 50 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "glossary_master",
      icon: "üìö",
      name: "–≠—Ä—É–¥–∏—Ç",
      desc: "–í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑—É—á–µ–Ω—ã",
      condition: "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–µ—Å—å –≥–ª–æ—Å—Å–∞—Ä–∏–π",
      category: "glossary",
    },
    {
      id: "search_master",
      icon: "üîç",
      name: "–ò—Å–∫–∞—Ç–µ–ª—å",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞",
      condition: "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏ 10 —Ä–∞–∑",
      category: "glossary",
    },
    {
      id: "video_watcher",
      icon: "üé¨",
      name: "–ó—Ä–∏—Ç–µ–ª—å",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ",
      condition: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 5 –≤–∏–¥–µ–æ –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è",
      category: "glossary",
    },
    {
      id: "definition_expert",
      icon: "üìù",
      name: "–ó–Ω–∞—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π",
      desc: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 20 —Ç–µ—Ä–º–∏–Ω–æ–≤",
      category: "glossary",
    },
    {
      id: "quick_learner",
      icon: "üí°",
      name: "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å",
      condition: "–ò–∑—É—á–∏—Ç–µ 10 —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å",
      category: "glossary",
    },

    // üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (7 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "edu_visitor",
      icon: "üëÄ",
      name: "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π",
      desc: "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞",
      category: "education",
    },
    {
      id: "edu_explorer",
      icon: "üó∫Ô∏è",
      name: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º",
      category: "education",
    },
    {
      id: "video_fan",
      icon: "üìπ",
      name: "–í–∏–¥–µ–æ–ª—é–±–∏—Ç–µ–ª—å",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ",
      condition: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 10 –≤–∏–¥–µ–æ",
      category: "education",
    },
    {
      id: "all_topics",
      icon: "üéØ",
      name: "–í—Å–µ–∑–Ω–∞—é—â–∏–π",
      desc: "–í—Å–µ —Ç–µ–º—ã –∏–∑—É—á–µ–Ω—ã",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ —Ç–µ–º—ã –≤ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–µ",
      category: "education",
    },
    {
      id: "collapsible_master",
      icon: "üìÇ",
      name: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤",
      condition: "–†–∞—Å–∫—Ä–æ–π—Ç–µ 20 –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤",
      category: "education",
    },
    {
      id: "statistics_buff",
      icon: "üìä",
      name: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
      condition: "–ò–∑—É—á–∏—Ç–µ –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
      category: "education",
    },
    {
      id: "diversification_pro",
      icon: "üé≤",
      name: "–ü—Ä–æ—Ñ–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
      condition: "–ò–∑—É—á–∏—Ç–µ —Ç–µ–º—É –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
      category: "education",
    },

    // üì¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (8 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "first_visit",
      icon: "üëã",
      name: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
      desc: "–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç",
      condition: "–í–ø–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      category: "activity",
    },
    {
      id: "home_returner",
      icon: "üè†",
      name: "–î–æ–º–æ—Å–µ–¥",
      desc: "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
      condition: "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É 10 —Ä–∞–∑",
      category: "activity",
    },
    {
      id: "explorer",
      icon: "üß≠",
      name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
      desc: "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
      category: "activity",
    },
    {
      id: "navigator",
      icon: "üó∫Ô∏è",
      name: "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä",
      desc: "–ß–∞—Å—Ç–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
      condition: "–°–æ–≤–µ—Ä—à–∏—Ç–µ 50 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏",
      category: "activity",
    },
    {
      id: "theme_switcher",
      icon: "üåì",
      name: "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
      desc: "–°–º–µ–Ω–∞ —Ç–µ–º—ã",
      condition: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ç–µ–º—É 5 —Ä–∞–∑",
      category: "activity",
    },
    {
      id: "dark_mode_fan",
      icon: "üåô",
      name: "–õ—é–±–∏—Ç–µ–ª—å —Ç–µ–º–Ω–æ—Ç—ã",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã",
      condition: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–º–Ω—É—é —Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "activity",
    },
    {
      id: "light_mode_fan",
      icon: "‚òÄÔ∏è",
      name: "–õ—é–±–∏—Ç–µ–ª—å —Å–≤–µ—Ç–∞",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã",
      condition: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
      category: "activity",
    },
    {
      id: "settings_explorer",
      icon: "‚öôÔ∏è",
      name: "–ù–∞—Å—Ç—Ä–æ–π—â–∏–∫",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      category: "activity",
    },

    // üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (6 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "doc_reader",
      icon: "üìÑ",
      name: "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥",
      desc: "–ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
      category: "documents",
    },
    {
      id: "all_docs",
      icon: "üìã",
      name: "–Æ—Ä–∏—Å—Ç",
      desc: "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
      category: "documents",
    },
    {
      id: "instruction_follower",
      icon: "üìñ",
      name: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
      desc: "–ß—Ç–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ 5 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
      category: "documents",
    },
    {
      id: "vault_explorer",
      icon: "üè¶",
      name: "–•—Ä–∞–Ω–∏—Ç–µ–ª—å",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ Vault",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ Vault",
      category: "documents",
    },
    {
      id: "safepal_user",
      icon: "üí≥",
      name: "–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ—à–µ–ª—å–∫–∞",
      desc: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SafePal",
      condition: "–ò–∑—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ SafePal",
      category: "documents",
    },
    {
      id: "faq_master",
      icon: "‚ùì",
      name: "–ó–Ω–∞—Ç–æ–∫ FAQ",
      desc: "–ò–∑—É—á–µ–Ω–∏–µ FAQ",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ",
      category: "documents",
    },

    // üé™ –≠—Ñ–∏—Ä—ã –∏ –∞–Ω–æ–Ω—Å—ã (5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "broadcast_viewer",
      icon: "üì°",
      name: "–ó—Ä–∏—Ç–µ–ª—å —ç—Ñ–∏—Ä–æ–≤",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ–∏—Ä–∞",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–ø–∏—Å—å —ç—Ñ–∏—Ä–∞",
      category: "broadcasts",
    },
    {
      id: "live_participant",
      icon: "üî¥",
      name: "–£—á–∞—Å—Ç–Ω–∏–∫ LIVE",
      desc: "–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ",
      condition: "–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —ç—Ñ–∏—Ä–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏",
      category: "broadcasts",
    },
    {
      id: "announcement_reader",
      icon: "üì¢",
      name: "–í –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π",
      desc: "–ß—Ç–µ–Ω–∏–µ –∞–Ω–æ–Ω—Å–æ–≤",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–æ–Ω—Å–æ–≤",
      category: "broadcasts",
    },
    {
      id: "question_asker",
      icon: "‚úçÔ∏è",
      name: "–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π",
      desc: "–í–æ–ø—Ä–æ—Å –∫ —ç—Ñ–∏—Ä—É",
      condition: "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º—É —ç—Ñ–∏—Ä—É",
      category: "broadcasts",
    },
    {
      id: "regular_viewer",
      icon: "üé•",
      name: "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑—Ä–∏—Ç–µ–ª—å",
      desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ–∏—Ä–æ–≤",
      condition: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 5 –∑–∞–ø–∏—Å–µ–π —ç—Ñ–∏—Ä–æ–≤",
      category: "broadcasts",
    },

    // üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (4 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
    {
      id: "support_contact",
      icon: "üí¨",
      name: "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π",
      desc: "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
      category: "support",
    },
    {
      id: "feedback_giver",
      icon: "üì¨",
      name: "–°–æ–≤–µ—Ç—á–∏–∫",
      desc: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
      condition: "–û—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
      category: "support",
    },
    {
      id: "dashboard_user",
      icon: "üìä",
      name: "–ê–Ω–∞–ª–∏—Ç–∏–∫",
      desc: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞",
      condition: "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞",
      category: "support",
    },
    {
      id: "share_master",
      icon: "üì§",
      name: "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å",
      desc: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
      condition: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–≤–∏–∑–∞",
      category: "support",
    },

    // üèÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ (10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    {
      id: "first_login_morning",
      icon: "üåÑ",
      name: "–†–∞—Å—Å–≤–µ—Ç",
      desc: "–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ —É—Ç—Ä–æ–º",
      condition: "–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ –ø–µ—Ä–∏–æ–¥ 6:00-9:00",
      category: "special",
    },
    {
      id: "weekend_enthusiast",
      icon: "üéâ",
      name: "–í—ã—Ö–æ–¥–Ω–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç",
      desc: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
      condition: "–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã 4 –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ–¥—Ä—è–¥",
      category: "special",
    },
    {
      id: "new_year",
      icon: "üéä",
      name: "–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º!",
      desc: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –≤–∏–∑–∏—Ç",
      condition: "–ó–∞–π–¥–∏—Ç–µ 1 —è–Ω–≤–∞—Ä—è",
      category: "special",
    },
    {
      id: "christmas",
      icon: "üéÑ",
      name: "–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –¥—É—Ö",
      desc: "–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤–∏–∑–∏—Ç",
      condition: "–ó–∞–π–¥–∏—Ç–µ 25 –¥–µ–∫–∞–±—Ä—è –∏–ª–∏ 7 —è–Ω–≤–∞—Ä—è",
      category: "special",
    },
    {
      id: "valentine",
      icon: "üíù",
      name: "–î–µ–Ω—å –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö",
      desc: "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –≤–∏–∑–∏—Ç",
      condition: "–ó–∞–π–¥–∏—Ç–µ 14 —Ñ–µ–≤—Ä–∞–ª—è",
      category: "special",
    },
    {
      id: "beta_tester",
      icon: "üß™",
      name: "–ë–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä",
      desc: "–†–∞–Ω–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      condition: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü",
      category: "special",
    },
    {
      id: "bug_reporter",
      icon: "üêõ",
      name: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–∞–≥–∞–º–∏",
      desc: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
      condition: "–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ",
      category: "special",
    },
    {
      id: "lucky_number",
      icon: "üçÄ",
      name: "–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫",
      desc: "–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ",
      condition: "–ù–∞–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 77% –≤ –∫–≤–∏–∑–µ",
      category: "special",
    },
    {
      id: "midnight_scholar",
      icon: "üåÉ",
      name: "–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫",
      desc: "–û–±—É—á–µ–Ω–∏–µ –Ω–æ—á—å—é",
      condition: "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –º–µ–∂–¥—É 00:00 –∏ 03:00",
      category: "special",
    },
    {
      id: "completionist",
      icon: "üíØ",
      name: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ–ª—å",
      desc: "–í—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
      condition: "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ 40 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
      category: "special",
    },
  ];
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = {
    quiz: { title: "üéØ –ö–≤–∏–∑—ã", badges: [] },
    streak: { title: "üî• –°–µ—Ä–∏–∏", badges: [] },
    glossary: { title: "üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π", badges: [] },
    education: { title: "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", badges: [] },
    activity: { title: "üì¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", badges: [] },
    documents: { title: "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", badges: [] },
    broadcasts: { title: "üé™ –≠—Ñ–∏—Ä—ã", badges: [] },
    support: { title: "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", badges: [] },
    special: { title: "üèÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ", badges: [] },
  };

  allBadges.forEach((badge) => {
    if (categories[badge.category]) {
      categories[badge.category].badges.push(badge);
    }
  });

  const unlockedCount = allBadges.filter((b) =>
    AppState.userData.unlockedBadges.includes(b.id)
  ).length;
  const totalCount = allBadges.length;
  const progressPercent = Math.round((unlockedCount / totalCount) * 100);

  container.innerHTML = `
    <h1>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
    <p class="caption mb-lg">–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–µ–π–¥–∂–∏, –ø—Ä–æ—Ö–æ–¥—è –∫–≤–∏–∑—ã –∏ –∏–∑—É—á–∞—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p>
    
    <div class="card mb-lg" style="text-align: center;">
      <h3>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</h3>
      <div class="progress-bar" style="margin: var(--space-md) 0;">
        <div class="progress-fill" style="width: ${progressPercent}%"></div>
      </div>
      <p class="caption"><strong>${unlockedCount}</strong> –∏–∑ <strong>${totalCount}</strong> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (${progressPercent}%)</p>
    </div>

    ${Object.entries(categories)
      .map(
        ([key, cat]) => `
      <h2 style="margin: var(--space-xl) 0 var(--space-md) 0;">${cat.title}</h2>
      <div class="badge-grid">${cat.badges
        .map((badge) => {
          const isUnlocked = AppState.userData.unlockedBadges.includes(
            badge.id
          );
          return `<div class="badge-item"><div class="badge ${
            isUnlocked ? "" : "badge-locked"
          }">${badge.icon}</div><div class="badge-name">${
            badge.name
          }</div><div class="badge-desc">${
            isUnlocked ? badge.desc : badge.condition
          }</div></div>`;
        })
        .join("")}</div>
    `
      )
      .join("")}
  `;
}

function renderGlossary(container) {
  const terms = window.APP_DATA.glossary;
  container.innerHTML = `<h1>–ì–ª–æ—Å—Å–∞—Ä–∏–π</h1><p class="caption mb-lg">–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</p><div class="search-box"><svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"/><path d="M21 21l-4.35-4.35"/></svg><input type="text" class="search-input" placeholder="–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤..." oninput="filterGlossary(this.value)"></div><div id="glossaryList" class="list">${terms
    .map(
      (term) =>
        `<div class="list-item" data-action="showTermDetail" data-term-id="${
          term.id
        }"><div><strong>${
          term.term
        }</strong><p class="caption" style="margin: 0;">${term.definition.substring(
          0,
          80
        )}...</p></div></div>`
    )
    .join("")}</div>`;
}

function filterGlossary(query) {
  const terms = window.APP_DATA.glossary;
  const filtered = terms.filter(
    (t) =>
      t.term.toLowerCase().includes(query.toLowerCase()) ||
      t.definition.toLowerCase().includes(query.toLowerCase())
  );
  const list = document.getElementById("glossaryList");
  list.innerHTML = filtered
    .map(
      (term) =>
        `<div class="list-item" data-action="showTermDetail" data-term-id="${
          term.id
        }"><div><strong>${
          term.term
        }</strong><p class="caption" style="margin: 0;">${term.definition.substring(
          0,
          80
        )}...</p></div></div>`
    )
    .join("");
}

// Debounced version of filterGlossary for better performance
const debouncedFilterGlossary = debounce(filterGlossary, 300);

function showTermDetail(termId) {
  hapticFeedback("light");
  const term = window.APP_DATA.glossary.find((t) => t.id === termId);
  if (!term) return;
  if (!AppState.userData.progress.glossaryViewed)
    AppState.userData.progress.glossaryViewed = 0;
  if (!AppState.userData.viewedTerms) AppState.userData.viewedTerms = [];
  if (!AppState.userData.viewedTerms.includes(termId)) {
    AppState.userData.viewedTerms.push(termId);
    AppState.userData.progress.glossaryViewed++;
    saveUserData();
  }
  const modal = document.createElement("div");
  modal.style.cssText =
    "position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center;z-index:1000;padding:20px;";
  modal.innerHTML = `<div class="card" style="max-width:500px;max-height:80vh;overflow-y:auto;"><h2>${
    term.term
  }</h2><p>${term.definition}</p>${
    term.videoUrl
      ? `<button class="btn btn-primary" data-action="openVideo" data-url="${term.videoUrl}">‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</button>`
      : ""
  }<button class="btn btn-ghost" data-action="closeModal" style="width:100%;margin-top:var(--space-md);">–ó–∞–∫—Ä—ã—Ç—å</button></div>`;
  modal.onclick = (e) => {
    if (e.target === modal) modal.remove();
  };
  document.body.appendChild(modal);
}

function renderSimulator(container) {
  container.innerHTML = `<h1>–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è</h1><p class="caption mb-lg">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</p><div class="card"><p style="color: var(--color-premium); font-weight: 600;">üöÄ –°–∫–æ—Ä–æ!</p><p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤.</p><div style="margin-top: var(--space-lg);"><h4>–ß—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:</h4><ul style="margin-top: var(--space-sm);"><li>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤</li><li>–°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</li><li>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤</li><li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</li></ul></div></div>`;
}

function renderHelp(container) {
  container.innerHTML = `<h1>–ü–æ–º–æ—â—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h1><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p><p>2. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–∏–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π</p><p>3. –ò–∑—É—á–∞–π—Ç–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ –≤–∏–¥–µ–æ</p><p>4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p></div></div></div><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ü—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p><p style="margin-top: var(--space-md); font-weight: 600; color: var(--color-error);">–í–∞–∂–Ω–æ: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–æ—Å—è—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.</p></div></div></div><div class="collapsible"><div class="collapsible-header" onclick="toggleCollapsible(this)"><span><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã</strong></span><svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 9l6 6 6-6"/></svg></div><div class="collapsible-content"><div class="collapsible-body"><p>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É MC Recovery Fund</p></div></div></div>`;
}

function renderProfile(container) {
  const userData = AppState.userData;
  container.innerHTML = `<h1>–ü—Ä–æ—Ñ–∏–ª—å</h1><div class="card mb-lg"><h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3><p>–°–µ—Ä–∏—è: <strong>${
    userData.streak
  } ${getDaysWord(userData.streak)}</strong></p><p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–≤–∏–∑–æ–≤: <strong>${
    userData.completedQuizzes.length
  }</strong></p><p>–ë–µ–π–¥–∂–µ–π: <strong>${
    userData.unlockedBadges.length
  }</strong></p></div><div class="card mb-lg"><h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3><button class="btn btn-ghost" data-action="resetProgress" style="width: 100%; margin-top: var(--space-md); color: var(--color-error);">–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</button></div>`;
}

function resetProgress() {
  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.")) {
    hapticFeedback("heavy");
    localStorage.removeItem("mc_recovery_user_data");
    AppState.userData = {
      streak: 0,
      lastActiveDate: null,
      completedQuizzes: [],
      unlockedBadges: [],
      progress: { quizzes: 0, eduTopics: 0, glossaryViewed: 0 },
      settings: { theme: "auto", language: "ru" },
    };
    navigate("home");
  }
}

// Theme Management
function toggleTheme() {
  const root = document.documentElement;
  const current = root.getAttribute("data-theme") || "light";
  const next = current === "light" ? "dark" : "light";

  root.setAttribute("data-theme", next);
  localStorage.setItem("theme", next);
  // –í–∞–∂–Ω–æ: —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
  root.style.removeProperty("--color-text");
  root.style.removeProperty("--color-bg");

  // Update icons
  const sunIcon = document.querySelector(".theme-icon-sun");
  const moonIcon = document.querySelector(".theme-icon-moon");

  if (next === "dark") {
    if (sunIcon) sunIcon.style.display = "none";
    if (moonIcon) moonIcon.style.display = "block";
  } else {
    if (sunIcon) sunIcon.style.display = "block";
    if (moonIcon) moonIcon.style.display = "none";
  }

  // Update Telegram theme if available
  if (tg && tg.themeParams) {
    if (next === "dark") {
      document
        .querySelector('meta[name="theme-color"]')
        ?.setAttribute("content", "#0a0f1a");
    } else {
      document
        .querySelector('meta[name="theme-color"]')
        ?.setAttribute("content", "#1326FD");
    }
  }

  hapticFeedback("light");
}

function initThemeIcons() {
  const theme = document.documentElement.getAttribute("data-theme") || "light";
  const sunIcon = document.querySelector(".theme-icon-sun");
  const moonIcon = document.querySelector(".theme-icon-moon");

  if (theme === "dark") {
    if (sunIcon) sunIcon.style.display = "none";
    if (moonIcon) moonIcon.style.display = "block";
  } else {
    if (sunIcon) sunIcon.style.display = "block";
    if (moonIcon) moonIcon.style.display = "none";
  }
}

// ==========================================
// Part 2: New sections rendering
// ==========================================

function renderInstructions(container) {
  const data = window.APP_DATA.instructions;
  if (!data || !data.groups) {
    container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
    return;
  }

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    <div class="card-grid">
      ${data.groups
        .map(
          (group) => `
        <div class="collapsible">
          <div class="collapsible-header" data-action="toggleCollapsible">
            <span><span style="font-size: 24px; margin-right: var(--space-sm);">${
              group.icon
            }</span><strong>${group.title}</strong></span>
            <svg class="collapsible-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M6 9l6 6 6-6"/>
            </svg>
          </div>
          <div class="collapsible-content">
            <div class="collapsible-body">
              <p class="caption mb-md">${group.description}</p>
              <div class="list">
                ${group.items
                  .map((item) => {
                    const isPlaceholder = item.url.includes("<ADD_LINK>");
                    return `
                    <div class="list-item ${
                      isPlaceholder ? "opacity-50" : ""
                    }" ${
                      !isPlaceholder
                        ? `data-action="openLink" data-url="${item.url}"`
                        : ""
                    }>
                      <div style="flex: 1;">
                        <strong>${item.title}</strong>
                        <p class="caption" style="margin: var(--space-xs) 0 0 0;">${
                          item.description
                        }</p>
                        ${
                          item.videos
                            ? `
                          <div style="margin-top: var(--space-sm); display: flex; gap: var(--space-sm); flex-wrap: wrap;">
                            ${item.videos
                              .map(
                                (video) => `
                              <button class="btn btn-ghost" data-action="openLink" data-url="${video.url}" style="padding: var(--space-xs) var(--space-sm); font-size: var(--font-size-small);">
                                ‚ñ∂Ô∏è ${video.title}
                              </button>
                            `
                              )
                              .join("")}
                          </div>
                        `
                            : ""
                        }
                      </div>
                      ${
                        isPlaceholder
                          ? '<span class="caption" style="color: var(--text-muted);">–°–∫–æ—Ä–æ</span>'
                          : '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"/><path d="M21 21l-4.35-4.35"/></svg>'
                      }
                    </div>
                  `;
                  })
                  .join("")}
              </div>
            </div>
          </div>
        </div>
      `
        )
        .join("")}
    </div>
  `;
}

function renderAnnouncements(container) {
  const announcements = window.APP_DATA.announcements || [];

  if (announcements.length === 0) {
    container.innerHTML = `
      <h1>–ê–Ω–æ–Ω—Å—ã</h1>
      <div class="card" style="text-align: center; padding: var(--space-xl);">
        <div style="font-size: 48px; margin-bottom: var(--space-md);">üì¢</div>
        <h3>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤</h3>
        <p class="caption">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏</p>
      </div>
    `;
    return;
  }

  container.innerHTML = `
    <h1>–ê–Ω–æ–Ω—Å—ã</h1>
    <p class="caption mb-lg">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</p>
    <div class="card-grid">
      ${announcements
        .map((announcement) => {
          const date = new Date(announcement.date);
          const dateStr = date.toLocaleDateString("ru-RU", {
            day: "numeric",
            month: "long",
            year: "numeric",
          });
          const isPast = date < new Date();

          return `
          <div class="card ${isPast ? "opacity-50" : ""}">
            <div style="display: flex; align-items: start; gap: var(--space-md); margin-bottom: var(--space-md);">
              <div style="font-size: 40px; line-height: 1;">${
                announcement.icon
              }</div>
              <div style="flex: 1;">
                <div class="caption" style="color: var(--color-primary); font-weight: 600; margin-bottom: var(--space-xs);">
                  ${dateStr}, ${announcement.time} ${announcement.timezone}
                </div>
                <h3 style="margin-bottom: var(--space-sm);">${
                  announcement.title
                }</h3>
              </div>
            </div>
            <p>${announcement.description}</p>
            ${
              announcement.formUrl
                ? `
              <button class="btn btn-primary" data-action="openLink" data-url="${announcement.formUrl}" style="width: 100%; margin-top: var(--space-md);">
                üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞—Ä–∞–Ω–µ–µ
              </button>
            `
                : ""
            }
            ${
              isPast
                ? '<p class="caption" style="margin-top: var(--space-md); color: var(--text-muted);">–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>'
                : ""
            }
          </div>
        `;
        })
        .join("")}
    </div>
  `;
}

function renderBroadcasts(container) {
  const data = window.APP_DATA.broadcasts;
  if (!data || !data.schedule) {
    container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
    return;
  }

  const upcoming = data.schedule.filter((b) => b.status === "upcoming");
  const completed = data.schedule.filter((b) => b.status === "completed");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card mb-lg" style="background: linear-gradient(135deg, var(--color-primary-light) 0%, var(--surface-1) 100%); border: 2px solid var(--color-primary);">
      <p style="line-height: var(--line-height-relaxed);">${data.intro}</p>
    </div>
    
    ${
      upcoming.length > 0
        ? `
      <h2 style="margin-bottom: var(--space-md);">üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —ç—Ñ–∏—Ä—ã</h2>
      <div class="card-grid mb-lg">
        ${upcoming
          .map((broadcast) => {
            const date = new Date(broadcast.date);
            const dateStr = date.toLocaleDateString("ru-RU", {
              day: "numeric",
              month: "long",
            });

            return `
            <div class="card" style="border: 2px solid var(--color-primary);">
              <div class="preview-label" style="color: var(--color-primary);">
                ${broadcast.day}, ${dateStr} ‚Ä¢ ${broadcast.time} ${broadcast.timezone}
              </div>
              <h3>${broadcast.title}</h3>
              <p class="caption">${broadcast.description}</p>
            </div>
          `;
          })
          .join("")}
      </div>
    `
        : ""
    }
    
    <h2 style="margin-bottom: var(--space-md);">üé¨ –ü—Ä–æ—à–µ–¥—à–∏–µ —ç—Ñ–∏—Ä—ã</h2>
    <div class="list">
      ${completed
        .map((broadcast) => {
          const date = new Date(broadcast.date);
          const dateStr = date.toLocaleDateString("ru-RU", {
            day: "numeric",
            month: "long",
          });

          return `
          <div class="list-item">
            <div style="flex: 1;">
              <div class="caption" style="margin-bottom: var(--space-xs);">
                ${broadcast.day}, ${dateStr} ‚Ä¢ ${broadcast.time} ${
            broadcast.timezone
          }
              </div>
              <strong>${broadcast.title}</strong>
              <p class="caption" style="margin: var(--space-xs) 0 0 0;">${
                broadcast.description
              }</p>
            </div>
            ${
              broadcast.recordUrl
                ? `<button class="btn btn-ghost" data-action="openLink" data-url="${broadcast.recordUrl}" style="white-space: nowrap;">‚ñ∂Ô∏è –ó–∞–ø–∏—Å—å</button>`
                : '<span class="caption" style="color: var(--text-muted);">–°–∫–æ—Ä–æ</span>'
            }
          </div>
        `;
        })
        .join("")}
    </div>
  `;
}

function renderDashboard(container) {
  const data = window.APP_DATA.dashboard;
  if (!data || !data.title) {
    container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
    return;
  }

  const isPlaceholder = data.url.includes("<ADD_");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card">
      <div style="text-align: center; padding: var(--space-xl) 0;">
        <div style="font-size: 64px; margin-bottom: var(--space-lg);">üìä</div>
        <h2 style="margin-bottom: var(--space-md);">${data.title}</h2>
        <p class="caption mb-lg">–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏</p>
        
        <div style="text-align: left; margin: var(--space-xl) 0;">
          <h4 style="margin-bottom: var(--space-md);">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
          <ul style="list-style: none; padding: 0;">
            ${data.features
              .map(
                (feature) => `
              <li style="padding: var(--space-sm) 0; display: flex; align-items: start; gap: var(--space-sm);">
                <span style="color: var(--color-success); font-size: 20px;">‚úì</span>
                <span>${feature}</span>
              </li>
            `
              )
              .join("")}
          </ul>
        </div>
        
        ${
          isPlaceholder
            ? `
          <div style="margin-top: var(--space-xl); padding: var(--space-lg); background: var(--surface-2); border-radius: var(--radius-md);">
            <p style="color: var(--color-premium); font-weight: 600; margin-bottom: var(--space-sm);">üöÄ –°–∫–æ—Ä–æ!</p>
            <p class="caption">–î–∞—à–±–æ—Ä–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.</p>
          </div>
        `
            : `
          <button class="btn btn-primary" data-action="openLink" data-url="${data.url}" style="margin-top: var(--space-lg);">
            –û—Ç–∫—Ä—ã—Ç—å –î–∞—à–±–æ—Ä–¥
          </button>
        `
        }
      </div>
    </div>
  `;
}

function renderSupport(container) {
  const data = window.APP_DATA.support;
  if (!data || !data.channels) {
    container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
    return;
  }

  const isPlaceholder = data.botUrl.includes("<ADD_");

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card-grid">
      ${data.channels
        .map(
          (channel) => `
        <div class="card card-interactive" ${
          !isPlaceholder
            ? `data-action="openLink" data-url="${channel.url}"`
            : ""
        }>
          <div style="text-align: center;">
            <div style="font-size: 48px; margin-bottom: var(--space-md);">üí¨</div>
            <h3>${channel.title}</h3>
            <p class="caption">${channel.description}</p>
            ${
              isPlaceholder
                ? `
              <div style="margin-top: var(--space-lg); padding: var(--space-md); background: var(--surface-2); border-radius: var(--radius-md);">
                <p class="caption" style="color: var(--text-muted);">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω</p>
              </div>
            `
                : `
              <button class="btn btn-primary" style="width: 100%; margin-top: var(--space-lg);">
                –°–≤—è–∑–∞—Ç—å—Å—è
              </button>
            `
            }
          </div>
        </div>
      `
        )
        .join("")}
    </div>
    
    <div class="card mt-lg" style="background: var(--surface-2);">
      <h3>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h3>
      <p class="caption">${
        data.workingHours?.weekdays ||
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 10:00 - 19:00 –ú–°–ö"
      }</p>
      <p class="caption">${
        data.workingHours?.weekend || "–°—É–±–±–æ—Ç–∞ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –í—ã—Ö–æ–¥–Ω–æ–π"
      }</p>
      <p class="caption" style="margin-top: var(--space-md);">${
        data.workingHours?.responseTime || "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 2 —á–∞—Å–æ–≤"
      }</p>
    </div>
  `;
}

function renderDocuments(container) {
  const documents = window.APP_DATA.documents || [];

  container.innerHTML = `
    <h1>–î–æ–∫—É–º–µ–Ω—Ç—ã</h1>
    <p class="caption mb-lg">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p>
    
    <div class="card-grid">
      ${documents
        .map(
          (doc) => `
        <div class="card card-interactive" data-action="openLink" data-url="${
          doc.url
        }">
          <div style="display: flex; align-items: start; gap: var(--space-md);">
            <div style="font-size: 40px; line-height: 1;">${doc.icon}</div>
            <div style="flex: 1;">
              <h3 style="margin-bottom: var(--space-sm);">${doc.title}</h3>
              <p class="caption">${doc.description}</p>
              <div style="margin-top: var(--space-md);">
                <span class="caption" style="color: var(--color-primary); font-weight: 600;">
                  ${doc.type.toUpperCase()} –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí
                </span>
              </div>
            </div>
          </div>
        </div>
      `
        )
        .join("")}
    </div>
    
    <div class="card mt-lg" style="border: 2px solid var(--border-strong); background: var(--surface-2);">
      <p class="caption" style="line-height: var(--line-height-relaxed);">
        <strong>–í–∞–∂–Ω–æ:</strong> –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö. 
        –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.
      </p>
    </div>
  `;
}

function renderFAQ(container) {
  const data = window.APP_DATA.faq;
  if (!data || !data.url) {
    container.innerHTML = `<div class="card"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>`;
    return;
  }

  container.innerHTML = `
    <h1>${data.title}</h1>
    <p class="caption mb-lg">${data.description}</p>
    
    <div class="card" style="text-align: center; padding: var(--space-xl);">
      <div style="font-size: 64px; margin-bottom: var(--space-lg);">‚ùì</div>
      <h2 style="margin-bottom: var(--space-md);">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
      <p class="caption mb-lg">–ù–∞–π–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ —Ñ–æ–Ω–¥–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</p>
      
      <button class="btn btn-primary" data-action="openLink" data-url="${data.url}" style="margin-top: var(--space-lg);">
        üìñ –û—Ç–∫—Ä—ã—Ç—å FAQ
      </button>
    </div>
    
    <div class="card mt-lg">
      <h3>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç?</h3>
      <p class="caption mb-md">–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è</p>
      <button class="btn btn-secondary" data-action="navigate" data-route="support" style="width: 100%;">
        üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
      </button>
    </div>
  `;
}

function openLink(url) {
  hapticFeedback("light");
  if (url.includes("<ADD_")) {
    alert("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞");
    return;
  }
  if (tg) {
    tg.openLink(url);
  } else {
    window.open(url, "_blank");
  }
}

// Utility: Debounce
function debounce(fn, delay) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => fn.apply(this, args), delay);
  };
}

// Utility: Lazy Load Images with Intersection Observer
function initLazyLoading() {
  const lazyImages = document.querySelectorAll(
    'img[data-src], img[loading="lazy"]'
  );

  if ("IntersectionObserver" in window) {
    const imageObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const img = entry.target;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute("data-src");
            }
            img.classList.add("loaded");
            imageObserver.unobserve(img);
          }
        });
      },
      {
        rootMargin: "50px 0px",
        threshold: 0.01,
      }
    );

    lazyImages.forEach((img) => imageObserver.observe(img));
  } else {
    // Fallback for browsers without Intersection Observer
    lazyImages.forEach((img) => {
      if (img.dataset.src) {
        img.src = img.dataset.src;
        img.removeAttribute("data-src");
      }
    });
  }
}

// Global error handler
window.addEventListener("error", (e) => {
  console.error("Global error:", e.error);
  // Could show toast notification here
});

window.addEventListener("unhandledrejection", (e) => {
  console.error("Unhandled promise rejection:", e.reason);
});

// Global Event Delegation Handler
document.addEventListener("click", (e) => {
  const target = e.target.closest("[data-action]");
  if (!target) return;

  const action = target.dataset.action;

  switch (action) {
    case "navigate":
      const route = target.dataset.route;
      const quizId = target.dataset.quizId;
      navigate(route, quizId ? { id: quizId } : {});
      break;
    case "startQuiz":
      startQuiz(target.dataset.quizId);
      break;
    case "selectAnswer":
      selectAnswer(parseInt(target.dataset.index));
      break;
    case "showHint":
      showHint();
      break;
    case "skipQuestion":
      skipQuestion();
      break;
    case "downloadResult":
      downloadResult();
      break;
    case "shareResult":
      shareResult();
      break;
    case "toggleCollapsible":
      toggleCollapsible(target);
      break;
    case "openVideo":
      openVideo(target.dataset.url);
      break;
    case "openLink":
      openLink(target.dataset.url);
      break;
    case "showTermDetail":
      showTermDetail(target.dataset.termId);
      break;
    case "closeModal":
      target.closest('div[style*="fixed"]')?.remove();
      break;
    case "resetProgress":
      resetProgress();
      break;
    case "refreshVault":
      refreshVault();
      break;
  }
});

async function refreshVault() {
  hapticFeedback("light");
  try {
    await loadVaultData();
    // Re-render home page if we're on it
    if (AppState.currentRoute === "home") {
      const container = document.getElementById("content");
      renderHome(container);
    }
  } catch (error) {
    console.error("Failed to refresh vault data:", error);
  }
}

// Initialize app
document.addEventListener("DOMContentLoaded", () => {
  loadUserData();
  initThemeIcons();

  // Load Vault data on startup
  loadVaultData().catch((err) => {
    console.error("Failed to load initial vault data:", err);
  });

  // Hide skeleton after initialization
  setTimeout(() => {
    const skeleton = document.getElementById("skeleton");
    if (skeleton && window.APP_DATA.quizzes.length > 0) {
      skeleton.style.display = "none";
    }
  }, 500);

  // Theme toggle
  const themeToggle = document.getElementById("themeToggle");
  if (themeToggle) {
    themeToggle.onclick = toggleTheme;
  }

  // Back button
  document.getElementById("backBtn").onclick = () => {
    if (AppState.currentRoute.startsWith("quiz-")) {
      navigate("quizzes");
    } else {
      navigate("home");
    }
  };

  const hash = window.location.hash.substring(1) || "home";

  // Wait for vault data to load before initial navigation
  setTimeout(() => {
    navigate(hash);
  }, 300);

  // Initialize lazy loading for images
  initLazyLoading();

  // Re-initialize lazy loading after each navigation
  const originalNavigate = navigate;
  window.navigate = function (...args) {
    originalNavigate.apply(this, args);
    setTimeout(() => initLazyLoading(), 100);
  };

  // Register Service Worker for PWA
  if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {
      navigator.serviceWorker
        .register("/sw.js")
        .then((registration) => {
          console.log("[App] SW registered:", registration.scope);

          // Check for updates every hour
          setInterval(() => {
            registration.update();
          }, 60 * 60 * 1000);
        })
        .catch((error) => {
          console.log("[App] SW registration failed:", error);
        });
    });
  }
});
